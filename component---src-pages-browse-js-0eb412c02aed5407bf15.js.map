{"version":3,"sources":["webpack:///./src/components/brands.js","webpack:///./src/pages/browse.js"],"names":["Brands","data","selectedBrand","onBrandSelect","useState","filteredBrands","setFilteredBrands","brandComponents","map","node","sort","brand1","brand2","name","brand","key","id","image","onClick","selected","title","render","filter","value","filtered","match","RegExp","location","uri","Uri","href","pathname","description","schema","edges","brandName","setPath","window","toString","query"],"mappings":"kPAKe,SAASA,EAAT,GAAuD,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,cAAgB,EAErBC,mBAASH,GAA9CI,EAF0D,KAE1CC,EAF0C,KAI3DC,EAAkBF,EAAeG,KAAI,qBAAGC,QACzCC,MAAK,SAACC,EAAQC,GAAT,OAAoBD,EAAOE,KAAOD,EAAOC,KAAO,GAAK,KAC1DL,KAAI,SAAAM,GACL,OACI,kBAAC,IAAD,CAAUC,IAAKD,EAAME,GACjBA,GAAIF,EAAME,GACVH,KAAMC,EAAMD,KACZI,MAAOH,EAAMG,MACbC,QAAS,kBAAMf,EAAcW,EAAMD,OACnCM,SAAUjB,GAAiBA,EAAcc,KAAOF,EAAME,QAUlE,OACI,kBAAC,IAAD,CAAcI,MAAM,UAAUC,OAAQ,kBAAMd,GAAiBe,OANlD,SAAAC,GACX,IAAMC,EAAWvB,EAAKqB,QAAO,qBAAGb,KAAwBI,KAAKY,MAAM,IAAIC,OAAOH,EAAO,SACrFjB,EAAkBkB,M,8EChBX,sBAAuB,IAArBvB,EAAoB,EAApBA,KAAM0B,EAAc,EAAdA,SACbC,EAAM,IAAIC,IAAIF,EAASG,MAC7B,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKH,SAAUA,EAASI,SAAUX,MAAM,UAAUY,YAAY,uCAC9D,kBAAChC,EAAD,CAAQC,KAAMA,EAAKgC,IAAS,UAAUC,MAClC/B,cAAe,SAAAgC,GACXP,EAAIQ,QAAJ,WAAuBD,GACvBE,OAAOV,SAASG,KAAOF,EAAIU,gBARhC,IAcFC,EAAK","file":"component---src-pages-browse-js-0eb412c02aed5407bf15.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport FilteredList from \"./utils/filtered-list\";\r\nimport ListItem from \"./utils/list-item\";\r\n\r\n\r\nexport default function Brands({data, selectedBrand, onBrandSelect}) {\r\n\r\n    const [filteredBrands, setFilteredBrands] = useState(data);\r\n\r\n    const brandComponents = filteredBrands.map(({ node: brand }) => brand)\r\n        .sort((brand1, brand2) => brand1.name > brand2.name ? 1 : -1)\r\n        .map(brand => {\r\n        return (\r\n            <ListItem key={brand.id}\r\n                id={brand.id}\r\n                name={brand.name}\r\n                image={brand.image}\r\n                onClick={() => onBrandSelect(brand.name)}\r\n                selected={selectedBrand && selectedBrand.id === brand.id}>\r\n            </ListItem>\r\n        )\r\n    });\r\n\r\n    const search = value => {\r\n        const filtered = data.filter(({ node: brand }) => brand.name.match(new RegExp(value, 'i')));\r\n        setFilteredBrands(filtered);\r\n    };\r\n\r\n    return (\r\n        <FilteredList title=\"Marques\" render={() => brandComponents} filter={search} />\r\n    );\r\n}","import React from \"react\";\r\nimport Uri from 'jsuri';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from \"../components/layout\";\r\nimport Brands from \"../components/brands\";\r\nimport SEO from \"../components/seo/seo\";\r\nimport './bulma-theme.scss';\r\nimport { schema } from '../constants';\r\n\r\nexport default ({data, location}) => {\r\n    const uri = new Uri(location.href);\r\n    return (\r\n        <Layout>\r\n            <SEO location={location.pathname} title=\"Marques\" description=\"SÃ©lectionnez une marque de voiture\" />\r\n            <Brands data={data[schema + 'Brands'].edges}\r\n                onBrandSelect={brandName => {\r\n                    uri.setPath(`/models/${brandName}`);\r\n                    window.location.href = uri.toString();\r\n                }} />\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport const query = graphql`query {\r\n    allMongodbBmbu7Ynqra11RqiBrands {\r\n        edges {\r\n            node {\r\n                name,\r\n                image\r\n            }\r\n        }\r\n    }\r\n}`;\r\n"],"sourceRoot":""}