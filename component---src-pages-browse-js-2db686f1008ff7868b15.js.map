{"version":3,"sources":["webpack:///./src/pages/browse.js"],"names":["query","Browse","data","location","uri","Uri","href","useState","allMongodbBmbu7Ynqra11RqiBrands","edges","filteredBrands","setFilteredBrands","brandComponents","map","node","sort","brand1","brand2","name","brand","key","id","image","onClick","brandName","setPath","window","toString","pathname","title","description","render","filter","value","filtered","match","RegExp"],"mappings":"8SAgEaA,EAAK,aAWHC,UAjEA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,EAAM,IAAIC,IAAIF,EAASG,MADQ,EAQOC,mBAASL,EAAKM,gCAAgCC,OAAnFC,EAR8B,KAQdC,EARc,KAU/BC,EAAkBF,EAAeG,KAAI,qBAAGC,QAC3CC,MAAK,SAACC,EAAQC,GAAT,OAAqBD,EAAOE,KAAOD,EAAOC,KAAO,GAAK,KAC3DL,KAAI,SAAAM,GAAK,OACR,kBAAC,IAAD,CACEC,IAAKD,EAAME,GACXA,GAAIF,EAAME,GACVH,KAAMC,EAAMD,KACZI,MAAOH,EAAMG,MACbC,QAAS,kBAfOC,EAeaL,EAAMD,KAdvCd,EAAIqB,QAAJ,WAAuBD,QACvBE,OAAOvB,SAASG,KAAOF,EAAIuB,YAFP,IAAAH,QAyBtB,OACE,kBAAC,IAAD,CAAQpB,IAAKA,EAAIuB,YACf,kBAAC,IAAD,CAAKxB,SAAUA,EAASyB,SAAUC,MAAM,UAAUC,YAAY,uCAC9D,kBAAC,IAAD,CAAcD,MAAM,UAAUE,OAAQ,kBAAMnB,GAAiBoB,OATlD,SAAAC,GACb,IAAMC,EAAWhC,EAAKM,gCAAgCC,MACnDuB,QAAO,qBAAGlB,KAAwBI,KAAKiB,MAAM,IAAIC,OAAOH,EAAO,SAClEtB,EAAkBuB","file":"component---src-pages-browse-js-2db686f1008ff7868b15.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Uri from 'jsuri';\nimport { graphql } from 'gatsby';\nimport './bulma-theme.scss';\nimport FilteredList from '../components/utils/filtered-list';\nimport ListItem from '../components/utils/list-item';\nimport { Layout } from '../components/layout';\nimport { SEO } from '../components/seo/seo';\n\nconst Browse = ({ data, location }) => {\n  const uri = new Uri(location.href);\n\n  const onBrandSelect = brandName => {\n    uri.setPath(`/models/${brandName}`);\n    window.location.href = uri.toString();\n  };\n\n  const [filteredBrands, setFilteredBrands] = useState(data.allMongodbBmbu7Ynqra11RqiBrands.edges);\n\n  const brandComponents = filteredBrands.map(({ node: brand }) => brand)\n    .sort((brand1, brand2) => (brand1.name > brand2.name ? 1 : -1))\n    .map(brand => (\n      <ListItem\n        key={brand.id}\n        id={brand.id}\n        name={brand.name}\n        image={brand.image}\n        onClick={() => onBrandSelect(brand.name)}\n      />\n    ));\n\n  const search = value => {\n    const filtered = data.allMongodbBmbu7Ynqra11RqiBrands.edges\n      .filter(({ node: brand }) => brand.name.match(new RegExp(value, 'i')));\n    setFilteredBrands(filtered);\n  };\n\n  return (\n    <Layout uri={uri.toString()}>\n      <SEO location={location.pathname} title=\"Marques\" description=\"SÃ©lectionnez une marque de voiture\" />\n      <FilteredList title=\"Marques\" render={() => brandComponents} filter={search} />\n    </Layout>\n  );\n};\n\nBrowse.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiBrands: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }),\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`query {\n    allMongodbBmbu7Ynqra11RqiBrands {\n        edges {\n            node {\n                name,\n                image\n            }\n        }\n    }\n}`;\n\nexport default Browse;\n"],"sourceRoot":""}