{"version":3,"file":"component---src-pages-browse-js-e1801a64521b6ab80834.js","mappings":"6KAEWA,EAAa,0CACbC,EAAc,2CC+CzB,EA7CqB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACrC,GAAsDC,EAAAA,EAAAA,UAAS,MAAxDC,EAAP,KAA4BC,EAA5B,KACA,GAAoDF,EAAAA,EAAAA,UAAS,MAAtDG,EAAP,KAA2BC,EAA3B,KAcA,OACE,gCACE,0BAAQC,UAAW,CAAC,QAAS,YAAaC,GAA+BC,KAAK,MAC5E,sBAAIF,UAAU,kBAAkBR,GAChC,qBAAGQ,UAAU,yCACX,yBACEG,GAAG,eACHC,KAAK,OACLC,QApBK,WACb,IAAMC,EAAQC,SAASC,cAAc,iBACrC,GAAIF,EAAMG,QAAUb,EAAqB,CACvCc,aAAaZ,GACb,IAAMa,EAAQC,YAAW,kBAAMlB,EAAOY,EAAMG,SAAQ,KAGpDV,EAAsBY,GACtBd,EAAuBS,EAAMG,SAavBT,UAAW,CAACC,EAAgC,SAASC,KAAK,OAE5D,wBAAMF,UAAU,iBACd,gBAAC,IAAD,CAAiBa,KAAK,cAI5B,sBAAIb,UDpCQ,qCCqCTP,Q,kEClCHqB,EAAW,SAAC,GAEX,IADLX,EACI,EADJA,GAAIY,EACA,EADAA,KAAMC,EACN,EADMA,MAAOC,EACb,EADaA,QAASC,EACtB,EADsBA,SAAUC,EAChC,EADgCA,IAE9BC,EAAa,CCNC,qCDiBpB,OAVIF,GACFE,EAAWC,KCLO,qCDQhBF,EACFC,EAAWC,KCVU,wCDYrBD,EAAWC,KCbY,0CDiBvB,0BAAQjB,KAAK,SAASJ,UAAWoB,EAAWlB,KAAK,KAAMe,QAAS,kBAAMA,EAAQd,KAC5E,8BACE,uBAAKmB,IAAKN,EAAOO,IAAKR,IACtB,kCAAaA,MAerBD,EAASU,aAAe,CACtBN,UAAU,EACVC,KAAK,GAGP,S,wHE+CA,UA7Ee,SAAC,GAAwB,IAAtBM,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,GAAOC,EAAAA,EAAAA,WACPC,EAAM,IAAIC,IAAJ,CAAQJ,EAASK,MAO7B,GAA4CpC,EAAAA,EAAAA,UAAS8B,EAAKO,gCAAgCC,OAAnFC,EAAP,KAAuBC,EAAvB,KAEMC,EAAkBF,EAAeG,KAAI,qBAAGC,QAC3CC,MAAK,SAACC,EAAQC,GAAT,OAAqBD,EAAOzB,KAAO0B,EAAO1B,KAAO,GAAK,KAC3DsB,KAAI,SAAAK,GAAK,OACR,sBAAIC,IAAKD,EAAME,YACb,gBAAC,IAAD,CACEzC,GAAIuC,EAAME,WACV7B,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAAS,kBAfK4B,EAeeH,EAAM3B,KAdzCc,EAAIiB,QAAJ,WAAuBD,QACvBE,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAA8BnB,IAFnB,IAAAgB,SA0BtB,OACE,gBAAC,IAAD,CAAQhB,IAAKA,EAAIoB,YACf,gBAAC,IAAD,CACEpB,IAAKH,EAASK,KACdL,SAAUA,EAASwB,SACnB1D,MAAOmC,EAAKwB,cAAc,CAAEhD,GAAI,4BAChCiD,YAAazB,EAAKwB,cAAc,CAAEhD,GAAI,oCAExC,gBAAC,IAAD,CACEX,MAAOmC,EAAKwB,cAAc,CAAEhD,GAAI,4BAChCV,OAAQ,kBAAM2C,GACd1C,OAjBS,SAAAe,GACb,IAAM4C,EAAW5B,EAAKO,gCAAgCC,MACnDvC,QAAO,qBAAG4C,KAAwBvB,KAAKuC,MAAM,IAAIC,OAAO9C,EAAO,SAClE0B,EAAkBkB","sources":["webpack://perfect-garage/./src/components/utils/filtered-list.module.scss","webpack://perfect-garage/./src/components/utils/filtered-list.js","webpack://perfect-garage/./src/components/utils/list-item.js","webpack://perfect-garage/./src/components/utils/list-item.module.scss","webpack://perfect-garage/./src/pages/browse.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var list = \"filtered-list-module--list--jcHES\";\nexport var listHeader = \"filtered-list-module--listHeader--H8u8k\";\nexport var searchInput = \"filtered-list-module--searchInput--HbyqD\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as filteredListStyles from './filtered-list.module.scss';\n\nconst FilteredList = ({ title, render, filter }) => {\n  const [previousFilterValue, setPreviousFilterValue] = useState(null);\n  const [filterInputTimeout, setFilterInputTimeout] = useState(null);\n\n  const search = () => {\n    const input = document.querySelector('#search-input');\n    if (input.value !== previousFilterValue) { // if text has changed\n      clearTimeout(filterInputTimeout); // this will interrupt previous search\n      const timer = setTimeout(() => filter(input.value), 700); // this will trigger new search some delay\n\n      // we save timer and values for later calls\n      setFilterInputTimeout(timer);\n      setPreviousFilterValue(input.value);\n    }\n  };\n\n  return (\n    <>\n      <header className={['field', 'is-size-4', filteredListStyles.listHeader].join(' ')}>\n        <h1 className=\"has-text-light\">{title}</h1>\n        <p className=\"control has-text-dark has-icons-right\">\n          <input\n            id=\"search-input\"\n            type=\"text\"\n            onKeyUp={search}\n            className={[filteredListStyles.searchInput, 'input'].join(' ')}\n          />\n          <span className=\"icon is-right\">\n            <FontAwesomeIcon icon=\"search\" />\n          </span>\n        </p>\n      </header>\n      <ul className={filteredListStyles.list}>\n        {render()}\n      </ul>\n    </>\n  );\n};\n\nFilteredList.propTypes = {\n  title: PropTypes.string.isRequired,\n  render: PropTypes.func.isRequired,\n  filter: PropTypes.func.isRequired,\n};\n\nexport default FilteredList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as listItemStyles from './list-item.module.scss';\n\nconst ListItem = ({\n  id, name, image, onClick, selected, big,\n}) => {\n  const classNames = [listItemStyles.logoLink];\n  if (selected) {\n    classNames.push(listItemStyles.selected);\n  }\n\n  if (big) {\n    classNames.push(listItemStyles.logoLinkBig);\n  } else {\n    classNames.push(listItemStyles.logoLinkSmall);\n  }\n\n  return (\n    <button type=\"button\" className={classNames.join(' ')} onClick={() => onClick(id)}>\n      <figure>\n        <img src={image} alt={name} />\n        <figcaption>{name}</figcaption>\n      </figure>\n    </button>\n  );\n};\n\nListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  selected: PropTypes.bool,\n  big: PropTypes.bool,\n};\n\nListItem.defaultProps = {\n  selected: false,\n  big: false,\n};\n\nexport default ListItem;\n","// extracted by mini-css-extract-plugin\nexport var logoLink = \"list-item-module--logoLink--kpsH-\";\nexport var logoLinkSmall = \"list-item-module--logoLinkSmall--4A+qc\";\nexport var logoLinkBig = \"list-item-module--logoLinkBig--pmnhY\";\nexport var selected = \"list-item-module--selected--Nwx6Q\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Uri from 'jsuri';\nimport { graphql } from 'gatsby';\nimport { useIntl, navigate } from 'gatsby-plugin-react-intl';\nimport FilteredList from '../components/utils/filtered-list';\nimport ListItem from '../components/utils/list-item';\nimport { Layout } from '../components/layout';\nimport { SEO } from '../components/seo/seo';\nimport { extractRelativePathWithParams } from '../functions/url';\nimport './bulma-theme.scss';\n\nconst Browse = ({ data, location }) => {\n  const intl = useIntl();\n  const uri = new Uri(location.href);\n\n  const onBrandSelect = brandName => {\n    uri.setPath(`/models/${brandName}`);\n    navigate(extractRelativePathWithParams(uri));\n  };\n\n  const [filteredBrands, setFilteredBrands] = useState(data.allMongodbBmbu7Ynqra11RqiBrands.edges);\n\n  const brandComponents = filteredBrands.map(({ node: brand }) => brand)\n    .sort((brand1, brand2) => (brand1.name > brand2.name ? 1 : -1))\n    .map(brand => (\n      <li key={brand.mongodb_id}>\n        <ListItem\n          id={brand.mongodb_id}\n          name={brand.name}\n          image={brand.image}\n          onClick={() => onBrandSelect(brand.name)}\n        />\n      </li>\n    ));\n\n  const search = value => {\n    const filtered = data.allMongodbBmbu7Ynqra11RqiBrands.edges\n      .filter(({ node: brand }) => brand.name.match(new RegExp(value, 'i')));\n    setFilteredBrands(filtered);\n  };\n\n  return (\n    <Layout uri={uri.toString()}>\n      <SEO\n        uri={location.href}\n        location={location.pathname}\n        title={intl.formatMessage({ id: 'pages.browse.meta.title' })}\n        description={intl.formatMessage({ id: 'pages.browse.meta.description' })}\n      />\n      <FilteredList\n        title={intl.formatMessage({ id: 'pages.browse.list_title' })}\n        render={() => brandComponents}\n        filter={search}\n      />\n    </Layout>\n  );\n};\n\nBrowse.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiBrands: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }),\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`query {\n    allMongodbBmbu7Ynqra11RqiBrands {\n        edges {\n            node {\n                name,\n                image,\n                mongodb_id,\n            }\n        }\n    }\n}`;\n\nexport default Browse;\n"],"names":["listHeader","searchInput","title","render","filter","useState","previousFilterValue","setPreviousFilterValue","filterInputTimeout","setFilterInputTimeout","className","filteredListStyles","join","id","type","onKeyUp","input","document","querySelector","value","clearTimeout","timer","setTimeout","icon","ListItem","name","image","onClick","selected","big","classNames","push","src","alt","defaultProps","data","location","intl","useIntl","uri","Uri","href","allMongodbBmbu7Ynqra11RqiBrands","edges","filteredBrands","setFilteredBrands","brandComponents","map","node","sort","brand1","brand2","brand","key","mongodb_id","brandName","setPath","navigate","extractRelativePathWithParams","toString","pathname","formatMessage","description","filtered","match","RegExp"],"sourceRoot":""}