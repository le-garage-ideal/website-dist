{"version":3,"sources":["webpack:///./src/pages/cars.js"],"names":["Cars","data","location","intl","useIntl","uri","Uri","href","completeCarList","allMongodbBmbu7Ynqra11RqiCars","edges","map","node","sort","sortCars","useState","filteredCars","setFilteredCars","splice","length","selectedCar","setSelectedCar","validateCar","index","id","replaceQueryParam","setPath","window","toString","carComponents","car","isSelected","mongodb_id","imageUrl","radioClassNames","carsStyles","radioLabel","join","key","name","variant","startYear","image","big","selected","onClick","type","className","iconButton","title","formatMessage","icon","carSelectionBox","onChange","pathname","description","render","filter","value","regex","RegExp","filtered","match","model","brand","query"],"mappings":"wtBAsIeA,UAzHF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACdC,EAAOC,oBAEPC,EAAM,IAAIC,IAAIJ,EAASK,MAEvBC,EAAkBP,EAAKQ,8BAA8BC,MAAMC,KAAI,qBAAGC,QAAiBC,KAAKC,KAL3D,EAMKC,mBAAS,EAAIP,IAA9CQ,EAN4B,KAMdC,EANc,KAOnCD,EAAaE,OAAO,EAAGF,EAAaG,OAAS,IAPV,MASGJ,mBAAS,MAAxCK,EAT4B,KASfC,EATe,KAW7BC,EAAc,SAACC,EAAOC,GAC1BnB,EAAIoB,kBAAJ,MAA4BF,EAASC,GACrCnB,EAAIqB,QAAQ,KACZC,OAAOzB,SAASK,KAAOF,EAAIuB,YAGvBC,EAAgBb,EAAaL,KAAI,SAAAmB,GACrC,IAAMC,EAAaX,IAAgBU,EAAIE,WACjCC,EAAQ,WAAcH,EAAIE,WAAlB,eACRE,EAAkB,CAAC,QAASC,IAAWC,YAAYC,KAAK,KAC9D,OACE,yBAAKC,IAAG,UAAYR,EAAIE,YACtB,kBAAC,IAAD,CACER,GAAIM,EAAIE,WACRO,KAAMT,EAAIU,SAAWV,EAAIW,UAAJ,MAAsBX,EAAIW,UAAc,IAC7DC,MAAOT,EACPU,KAAG,EACHC,UAAU,EACVC,QAAS,kBAAMxB,EAAeS,EAAIE,gBAGjCD,GAEC,4BACEe,KAAK,SACLC,UAAcZ,IAAWa,WAAhB,eACTH,QAAS,kBAAMxB,EAAeS,EAAIE,aAClCiB,MAAO9C,EAAK+C,cAAc,CAAE1B,GAAI,sCAEhC,kBAAC,IAAD,CAAiB2B,KAAK,UAK1BpB,GAEE,yBAAKgB,UAAWZ,IAAWiB,iBACzB,yBAAKL,UAAU,WACb,2BAAOA,UAAWb,GAChB,2BAAOY,KAAK,QAAQP,KAAK,KAAKc,SAAU,kBAAM/B,EAAY,EAAGQ,EAAIE,eADnE,QAKA,2BAAOe,UAAWb,GAChB,2BAAOY,KAAK,QAAQP,KAAK,KAAKc,SAAU,kBAAM/B,EAAY,EAAGQ,EAAIE,eADnE,QAKA,2BAAOe,UAAWb,GAChB,2BAAOY,KAAK,QAAQP,KAAK,KAAKc,SAAU,kBAAM/B,EAAY,EAAGQ,EAAIE,eADnE,cAmBd,OACE,kBAAC,IAAD,CAAQ3B,IAAKA,EAAIuB,YACf,kBAAC,IAAD,CACEvB,IAAKH,EAASK,KACdL,SAAUA,EAASoD,SACnBL,MAAO9C,EAAK+C,cAAc,CAAE1B,GAAI,0BAChC+B,YAAapD,EAAK+C,cAAc,CAAE1B,GAAI,kCAExC,kBAAC,IAAD,CACEyB,MAAUzC,EAAgBW,OAArB,IAA+BhB,EAAK+C,cAAc,CAAE1B,GAAI,0BAC7DgC,OAAQ,kBAAM3B,GACd4B,OAjBS,SAAAC,GACb,IAAMC,EAAQ,IAAIC,OAAOF,EAAO,KAC1BG,EAAWrD,EAAgBiD,QAAO,SAAA3B,GAAG,OAAIA,EAAIU,QAAQsB,MAAMH,IAAU7B,EAAIiC,MAAMC,MAAMzB,KAAKuB,MAAMH,MACtG1C,EAAgB4C,QAgDb,IAAMI,EAAK","file":"component---src-pages-cars-js-3cdf96f6eb0ad17bcea1.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Uri from 'jsuri';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useIntl } from 'gatsby-plugin-intl';\nimport { Layout } from '../components/layout';\nimport { SEO } from '../components/seo/seo';\nimport carsStyles from './cars.module.scss';\nimport FilteredList from '../components/utils/filtered-list';\nimport ListItem from '../components/utils/list-item';\nimport { sortCars } from '../functions/sort';\n\nconst Cars = ({ data, location }) => {\n  const intl = useIntl();\n\n  const uri = new Uri(location.href);\n\n  const completeCarList = data.allMongodbBmbu7Ynqra11RqiCars.edges.map(({ node }) => node).sort(sortCars);\n  const [filteredCars, setFilteredCars] = useState([...completeCarList]);\n  filteredCars.splice(0, filteredCars.length - 20);\n\n  const [selectedCar, setSelectedCar] = useState(null);\n\n  const validateCar = (index, id) => {\n    uri.replaceQueryParam(`car${index}`, id);\n    uri.setPath('/');\n    window.location.href = uri.toString();\n  };\n\n  const carComponents = filteredCars.map(car => {\n    const isSelected = selectedCar === car.mongodb_id;\n    const imageUrl = `/images/${car.mongodb_id}-resized.jpg`;\n    const radioClassNames = ['radio', carsStyles.radioLabel].join(' ');\n    return (\n      <div key={`carItem${car.mongodb_id}`}>\n        <ListItem\n          id={car.mongodb_id}\n          name={car.variant + (car.startYear ? ` - ${car.startYear}` : '')}\n          image={imageUrl}\n          big\n          selected={false}\n          onClick={() => setSelectedCar(car.mongodb_id)}\n        />\n        {\n          !isSelected\n          && (\n            <button\n              type=\"button\"\n              className={`${carsStyles.iconButton} icon-button`}\n              onClick={() => setSelectedCar(car.mongodb_id)}\n              title={intl.formatMessage({ id: 'pages.cars.add_to_garage_tooltip' })}\n            >\n              <FontAwesomeIcon icon=\"plus\" />\n            </button>\n          )\n        }\n        {\n          isSelected\n          && (\n            <div className={carsStyles.carSelectionBox}>\n              <div className=\"control\">\n                <label className={radioClassNames}>\n                  <input type=\"radio\" name=\"#1\" onChange={() => validateCar(1, car.mongodb_id)} />\n                  &nbsp;\n                  #1\n                </label>\n                <label className={radioClassNames}>\n                  <input type=\"radio\" name=\"#2\" onChange={() => validateCar(2, car.mongodb_id)} />\n                  &nbsp;\n                  #2\n                </label>\n                <label className={radioClassNames}>\n                  <input type=\"radio\" name=\"#3\" onChange={() => validateCar(3, car.mongodb_id)} />\n                  &nbsp;\n                  #3\n                </label>\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  });\n\n  const search = value => {\n    const regex = new RegExp(value, 'i');\n    const filtered = completeCarList.filter(car => car.variant.match(regex) || car.model.brand.name.match(regex));\n    setFilteredCars(filtered);\n  };\n\n  return (\n    <Layout uri={uri.toString()}>\n      <SEO\n        uri={location.href}\n        location={location.pathname}\n        title={intl.formatMessage({ id: 'pages.cars.meta.title' })}\n        description={intl.formatMessage({ id: 'pages.cars.meta.description' })}\n      />\n      <FilteredList\n        title={`${completeCarList.length} ${intl.formatMessage({ id: 'pages.cars.list_title' })}`}\n        render={() => carComponents}\n        filter={search}\n      />\n    </Layout>\n  );\n};\n\nCars.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiCars: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            mongodb_id: PropTypes.string.isRequired,\n            variant: PropTypes.string.isRequired,\n            startYear: PropTypes.string,\n            model: PropTypes.shape({\n              brand: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n              }),\n              name: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Cars;\n\nexport const query = graphql`\n    query {\n        allMongodbBmbu7Ynqra11RqiCars {\n        edges {\n          node {\n              mongodb_id,\n              variant,\n              startYear,\n              model {\n                  brand {\n                      name\n                  }\n                 name\n              }\n          }\n        }\n      }\n    }`;\n"],"sourceRoot":""}