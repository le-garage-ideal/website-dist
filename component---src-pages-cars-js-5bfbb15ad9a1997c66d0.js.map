{"version":3,"sources":["webpack:///./src/pages/cars.js","webpack:///./src/constants.js"],"names":["Cars","data","location","uri","Uri","href","completeCarList","allMongodbBmbu7Ynqra11RqiCars","edges","map","node","sort","sortCars","useState","filteredCars","setFilteredCars","splice","length","selectedCar","setSelectedCar","validateCar","index","id","replaceQueryParam","setPath","window","toString","carComponents","car","isSelected","mongodb_id","imageUrl","key","name","variant","startYear","image","big","selected","onClick","type","className","carsStyles","iconButton","title","icon","carSelectionBox","carLabels","onChange","pathname","description","render","filter","value","regex","RegExp","filtered","match","model","brand","query"],"mappings":"kuBAkIeA,UArHF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACdC,EAAM,IAAIC,IAAIF,EAASG,MAEvBC,EAAkBL,EAAKM,8BAA8BC,MAAMC,KAAI,qBAAGC,QAAiBC,KAAKC,KAH3D,EAIKC,mBAAS,EAAIP,IAA9CQ,EAJ4B,KAIdC,EAJc,KAKnCD,EAAaE,OAAO,EAAGF,EAAaG,OAAS,IALV,MAOGJ,mBAAS,MAAxCK,EAP4B,KAOfC,EAPe,KAS7BC,EAAc,SAACC,EAAOC,GAC1BnB,EAAIoB,kBAAJ,MAA4BF,EAASC,GACrCnB,EAAIqB,QAAQ,KACZC,OAAOvB,SAASG,KAAOF,EAAIuB,YAGvBC,EAAgBb,EAAaL,KAAI,SAAAmB,GACrC,IAAMC,EAAaX,IAAgBU,EAAIE,WACjCC,EAAQ,WAAcH,EAAIE,WAAlB,eACd,OACE,yBAAKE,IAAG,UAAYJ,EAAIE,YACtB,kBAAC,IAAD,CACER,GAAIM,EAAIE,WACRG,KAAML,EAAIM,SAAWN,EAAIO,UAAJ,MAAsBP,EAAIO,UAAc,IAC7DC,MAAOL,EACPM,KAAG,EACHC,UAAU,EACVC,QAAS,kBAAMpB,EAAeS,EAAIE,gBAGjCD,GAEC,4BACEW,KAAK,SACLC,UAAcC,IAAWC,WAAhB,eACTJ,QAAS,kBAAMpB,EAAeS,EAAIE,aAClCc,MAAM,qBAEN,kBAAC,IAAD,CAAiBC,KAAK,UAK1BhB,GAEE,yBAAKY,UAAWC,IAAWI,iBACzB,yBAAKL,UAAU,WACb,2BAAOA,UAAU,SACf,2BAAOD,KAAK,QAAQP,KAAMc,IAAU,GAAIC,SAAU,kBAAM5B,EAAY,EAAGQ,EAAIE,eAD7E,IAGGiB,IAAU,IAEb,2BAAON,UAAU,SACf,2BAAOD,KAAK,QAAQP,KAAMc,IAAU,GAAIC,SAAU,kBAAM5B,EAAY,EAAGQ,EAAIE,eAD7E,IAGGiB,IAAU,IAEb,2BAAON,UAAU,SACf,2BAAOD,KAAK,QAAQP,KAAMc,IAAU,GAAIC,SAAU,kBAAM5B,EAAY,EAAGQ,EAAIE,eAD7E,IAGGiB,IAAU,UAgB3B,OACE,kBAAC,IAAD,CAAQ5C,IAAKA,EAAIuB,YACf,kBAAC,IAAD,CACExB,SAAUA,EAAS+C,SACnBL,MAAM,gCACNM,YAAY,uDAEd,kBAAC,IAAD,CACEN,MAAUtC,EAAgBW,OAArB,kCACLkC,OAAQ,kBAAMxB,GACdyB,OAhBS,SAAAC,GACb,IAAMC,EAAQ,IAAIC,OAAOF,EAAO,KAC1BG,EAAWlD,EAAgB8C,QAAO,SAAAxB,GAAG,OAAIA,EAAIM,QAAQuB,MAAMH,IAAU1B,EAAI8B,MAAMC,MAAM1B,KAAKwB,MAAMH,MACtGvC,EAAgByC,QA+Cb,IAAMI,EAAK,c,kCCpIlB,kCAAO,IAAMb,EAAY,CACvB,QACA,YACA","file":"component---src-pages-cars-js-5bfbb15ad9a1997c66d0.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Uri from 'jsuri';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { carLabels } from '../constants';\nimport { Layout } from '../components/layout';\nimport { SEO } from '../components/seo/seo';\nimport carsStyles from './cars.module.scss';\nimport FilteredList from '../components/utils/filtered-list';\nimport ListItem from '../components/utils/list-item';\nimport { sortCars } from '../functions/sort';\n\nconst Cars = ({ data, location }) => {\n  const uri = new Uri(location.href);\n\n  const completeCarList = data.allMongodbBmbu7Ynqra11RqiCars.edges.map(({ node }) => node).sort(sortCars);\n  const [filteredCars, setFilteredCars] = useState([...completeCarList]);\n  filteredCars.splice(0, filteredCars.length - 20);\n\n  const [selectedCar, setSelectedCar] = useState(null);\n\n  const validateCar = (index, id) => {\n    uri.replaceQueryParam(`car${index}`, id);\n    uri.setPath('/');\n    window.location.href = uri.toString();\n  };\n\n  const carComponents = filteredCars.map(car => {\n    const isSelected = selectedCar === car.mongodb_id;\n    const imageUrl = `/images/${car.mongodb_id}-resized.jpg`;\n    return (\n      <div key={`carItem${car.mongodb_id}`}>\n        <ListItem\n          id={car.mongodb_id}\n          name={car.variant + (car.startYear ? ` - ${car.startYear}` : '')}\n          image={imageUrl}\n          big\n          selected={false}\n          onClick={() => setSelectedCar(car.mongodb_id)}\n        />\n        {\n          !isSelected\n          && (\n            <button\n              type=\"button\"\n              className={`${carsStyles.iconButton} icon-button`}\n              onClick={() => setSelectedCar(car.mongodb_id)}\n              title=\"Ajouter au garage\"\n            >\n              <FontAwesomeIcon icon=\"plus\" />\n            </button>\n          )\n        }\n        {\n          isSelected\n          && (\n            <div className={carsStyles.carSelectionBox}>\n              <div className=\"control\">\n                <label className=\"radio\">\n                  <input type=\"radio\" name={carLabels[0]} onChange={() => validateCar(1, car.mongodb_id)} />\n                  &nbsp;\n                  {carLabels[0]}\n                </label>\n                <label className=\"radio\">\n                  <input type=\"radio\" name={carLabels[1]} onChange={() => validateCar(2, car.mongodb_id)} />\n                  &nbsp;\n                  {carLabels[1]}\n                </label>\n                <label className=\"radio\">\n                  <input type=\"radio\" name={carLabels[2]} onChange={() => validateCar(3, car.mongodb_id)} />\n                  &nbsp;\n                  {carLabels[2]}\n                </label>\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  });\n\n  const search = value => {\n    const regex = new RegExp(value, 'i');\n    const filtered = completeCarList.filter(car => car.variant.match(regex) || car.model.brand.name.match(regex));\n    setFilteredCars(filtered);\n  };\n\n  return (\n    <Layout uri={uri.toString()}>\n      <SEO\n        location={location.pathname}\n        title=\"Toutes les voitures sportives\"\n        description=\"Liste de toutes les voitures sportives disponibles\"\n      />\n      <FilteredList\n        title={`${completeCarList.length} voitures de sport disponibles!`}\n        render={() => carComponents}\n        filter={search}\n      />\n    </Layout>\n  );\n};\n\nCars.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiCars: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            mongodb_id: PropTypes.string.isRequired,\n            variant: PropTypes.string.isRequired,\n            startYear: PropTypes.string,\n            model: PropTypes.shape({\n              brand: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n              }),\n              name: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Cars;\n\nexport const query = graphql`\n    query {\n        allMongodbBmbu7Ynqra11RqiCars {\n        edges {\n          node {\n              mongodb_id,\n              variant,\n              startYear,\n              model {\n                  brand {\n                      name\n                  }\n                 name\n              }\n          }\n        }\n      }\n    }`;\n","export const carLabels = [\n  'Daily',\n  'Collector',\n  'Perfs',\n];\n"],"sourceRoot":""}