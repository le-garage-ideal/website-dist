{"version":3,"sources":["webpack:///./src/functions/sort.js","webpack:///./src/pages/cars.js"],"names":["sortCars","a","b","sortField","field","data","location","uri","Uri","href","completeCarList","schema","edges","map","node","sort","useState","filteredCars","setFilteredCars","splice","length","selectedCar","setSelectedCar","validateCar","index","id","replaceQueryParam","setPath","window","toString","carComponents","car","isSelected","mongodb_id","imageUrl","key","name","variant","startYear","image","big","selected","onClick","className","carsStyles","iconButton","title","icon","carSelectionBox","type","carLabels","onChange","pathname","description","render","filter","value","regex","RegExp","filtered","match","model","brand","query"],"mappings":"2FAiBeA,IAhBE,SAACC,EAAGC,GACjB,IAAMC,EAAY,SAACF,EAAGC,EAAGE,GACrB,OAAKH,EAAEG,IAAWF,EAAEE,GAGfH,EAAEG,GAGFF,EAAEE,GAGAH,EAAEG,GAASF,EAAEE,IAAU,EAAIH,EAAEG,KAAWF,EAAEE,GAAS,EAAI,EAFnD,GAHC,EAHD,GAUf,OAAwC,IAAjCD,EAAUF,EAAGC,EAAG,aAAqBC,EAAUF,EAAGC,EAAG,WAAaC,EAAUF,EAAGC,EAAG,e,yqBCD9E,sBAAuB,IAArBG,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAEbC,EAAM,IAAIC,IAAIF,EAASG,MAEvBC,EAAkBL,EAAKM,IAAS,QAAQC,MAAMC,KAAI,qBAAGC,QAAiBC,KAAKf,KAJhD,EAKOgB,mBAAS,EAAIN,IAA9CO,EAL0B,KAKZC,EALY,KAMjCD,EAAaE,OAAO,EAAGF,EAAaG,OAAS,IANZ,MAQKJ,mBAAS,MAAxCK,EAR0B,KAQbC,EARa,KAU3BC,EAAc,SAACC,EAAOC,GACxBlB,EAAImB,kBAAJ,MAA4BF,EAASC,GACrClB,EAAIoB,QAAQ,KACZC,OAAOtB,SAASG,KAAOF,EAAIsB,YAGzBC,EAAgBb,EAAaJ,KAAI,SAAAkB,GACnC,IAAMC,EAAaX,IAAgBU,EAAIE,WACjCC,EAAQ,WAAcH,EAAIE,WAAlB,eACd,OACI,yBAAKE,IAAK,UAAYJ,EAAIE,YACtB,kBAAC,IAAD,CACIR,GAAIM,EAAIE,WACRG,KAAML,EAAIM,SAAWN,EAAIO,UAAY,MAAQP,EAAIO,UAAY,IAC7DC,MAAOL,EACPM,KAAK,EACLC,UAAU,EACVC,QAAS,kBAAMpB,EAAeS,EAAIE,gBAMnCD,GACC,4BAAQW,UAAWC,IAAWC,WAAa,eAAgBH,QAAS,kBAAMpB,EAAeS,EAAIE,aACzFa,MAAM,qBACN,kBAAC,IAAD,CAAiBC,KAAK,UAI1Bf,GACA,yBAAKW,UAAWC,IAAWI,iBACvB,yBAAKL,UAAU,WACX,2BAAOA,UAAU,SACb,2BAAOM,KAAK,QAAQb,KAAMc,IAAU,GAAIC,SAAU,kBAAM5B,EAAY,EAAGQ,EAAIE,eAD/E,IAEKiB,IAAU,IAEf,2BAAOP,UAAU,SACb,2BAAOM,KAAK,QAAQb,KAAMc,IAAU,GAAIC,SAAU,kBAAM5B,EAAY,EAAGQ,EAAIE,eAD/E,IAEKiB,IAAU,IAEf,2BAAOP,UAAU,SACb,2BAAOM,KAAK,QAAQb,KAAMc,IAAU,GAAIC,SAAU,kBAAM5B,EAAY,EAAGQ,EAAIE,eAD/E,IAEKiB,IAAU,UAevC,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK5C,SAAUA,EAAS8C,SAAUN,MAAM,gCAAgCO,YAAY,uDACpF,kBAAC,IAAD,CAAcP,MAAOpC,EAAgBU,OAAS,kCAAmCkC,OAAQ,kBAAMxB,GAAeyB,OATvG,SAAAC,GACX,IAAMC,EAAQ,IAAIC,OAAOF,EAAO,KAC1BG,EAAWjD,EAAgB6C,QAAO,SAAAxB,GAAG,OAAIA,EAAIM,QAAQuB,MAAMH,IAAU1B,EAAI8B,MAAMC,MAAM1B,KAAKwB,MAAMH,MACtGvC,EAAgByC,QAWjB,IAAMI,EAAK","file":"component---src-pages-cars-js-ae58b83684e6e7d920bb.js","sourcesContent":["\r\nconst sortCars = (a, b) => {\r\n    const sortField = (a, b, field) => {\r\n        if (!a[field] && !b[field]) {\r\n            return 0;\r\n        }\r\n        if (!a[field]) {\r\n            return -1;\r\n        }\r\n        if (!b[field]) {\r\n            return 1;\r\n        }\r\n        return a[field] < b[field] ? -1 : a[field] === b[field] ? 0 : 1;\r\n    }; \r\n    return sortField(a, b, 'startYear') === 0 ? sortField(a, b, 'variant') : sortField(a, b, 'startYear');\r\n};\r\n\r\nexport default sortCars;\r\n","import React, { useState } from \"react\";\r\nimport { graphql } from 'gatsby';\r\nimport Uri from 'jsuri';\r\nimport { schema, carLabels } from '../constants';\r\nimport { Layout } from \"../components/layout\";\r\nimport { SEO } from \"../components/seo/seo\";\r\nimport carsStyles from \"./cars.module.scss\";\r\nimport FilteredList from '../components/utils/filtered-list';\r\nimport ListItem from '../components/utils/list-item';\r\nimport sortCars from '../functions/sort';\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default ({data, location}) => {\r\n    \r\n    const uri = new Uri(location.href);\r\n    \r\n    const completeCarList = data[schema + 'Cars'].edges.map(({ node }) => node).sort(sortCars);\r\n    const [filteredCars, setFilteredCars] = useState([...completeCarList]);\r\n    filteredCars.splice(0, filteredCars.length - 20);\r\n    \r\n    const [selectedCar, setSelectedCar] = useState(null);\r\n\r\n    const validateCar = (index, id) => {\r\n        uri.replaceQueryParam(`car${index}`, id);\r\n        uri.setPath('/');\r\n        window.location.href = uri.toString();\r\n    };\r\n\r\n    const carComponents = filteredCars.map(car => {\r\n        const isSelected = selectedCar === car.mongodb_id;\r\n        const imageUrl = `/images/${car.mongodb_id}-resized.jpg`;\r\n        return (\r\n            <div key={'carItem' + car.mongodb_id}>\r\n                <ListItem\r\n                    id={car.mongodb_id}\r\n                    name={car.variant + (car.startYear ? ' - ' + car.startYear : '')}\r\n                    image={imageUrl}\r\n                    big={true}\r\n                    selected={false}\r\n                    onClick={() => setSelectedCar(car.mongodb_id)\r\n                        /*() => {\r\n                        uri.setPath(`/car/${car.mongodb_id}`);\r\n                        window.location.href = uri.toString();\r\n                    }*/}>\r\n                </ListItem>\r\n                { !isSelected && \r\n                    <button className={carsStyles.iconButton + \" icon-button\"} onClick={() => setSelectedCar(car.mongodb_id)}\r\n                        title=\"Ajouter au garage\">\r\n                        <FontAwesomeIcon icon=\"plus\" />\r\n                    </button>\r\n                }\r\n                { \r\n                    isSelected &&\r\n                    <div className={carsStyles.carSelectionBox}>\r\n                        <div className=\"control\">\r\n                            <label className=\"radio\">\r\n                                <input type=\"radio\" name={carLabels[0]} onChange={() => validateCar(1, car.mongodb_id)} />&nbsp;\r\n                                {carLabels[0]}\r\n                            </label>\r\n                            <label className=\"radio\">\r\n                                <input type=\"radio\" name={carLabels[1]} onChange={() => validateCar(2, car.mongodb_id)} />&nbsp;\r\n                                {carLabels[1]}\r\n                            </label>\r\n                            <label className=\"radio\">\r\n                                <input type=\"radio\" name={carLabels[2]} onChange={() => validateCar(3, car.mongodb_id)} />&nbsp;\r\n                                {carLabels[2]}\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                }   \r\n            </div>\r\n        )\r\n    });\r\n\r\n    const search = value => {\r\n        const regex = new RegExp(value, 'i');\r\n        const filtered = completeCarList.filter(car => car.variant.match(regex) || car.model.brand.name.match(regex));\r\n        setFilteredCars(filtered);\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO location={location.pathname} title=\"Toutes les voitures sportives\" description=\"Liste de toutes les voitures sportives disponibles\" />\r\n            <FilteredList title={completeCarList.length + ' voitures de sport disponibles!'} render={() => carComponents} filter={search} />\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport const query = graphql`\r\n    query {\r\n        allMongodbBmbu7Ynqra11RqiCars {\r\n        edges {\r\n          node {\r\n              mongodb_id,\r\n              variant,\r\n              power,\r\n              officialWeight, \r\n              weight,\r\n              options,\r\n              startYear,\r\n              endYear,\r\n              model {\r\n                  brand {\r\n                      name\r\n                  }\r\n                 name\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n"],"sourceRoot":""}