{"version":3,"file":"component---src-pages-index-js-773ceb8dccdf200fbb06.js","mappings":"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","sources":["webpack://perfect-garage/./src/constants.js","webpack://perfect-garage/./src/components/utils/card.module.scss","webpack://perfect-garage/./src/components/utils/card.js","webpack://perfect-garage/./src/components/title/title.module.scss","webpack://perfect-garage/./src/components/title/title.js","webpack://perfect-garage/./src/components/car/spec.module.scss","webpack://perfect-garage/./src/components/car/spec.js","webpack://perfect-garage/./src/components/car/car.module.scss","webpack://perfect-garage/./src/components/car/car.js","webpack://perfect-garage/./src/pages/index.js","webpack://perfect-garage/./src/pages/index.module.scss"],"sourcesContent":["export const carLabels = (index, intl) => intl.formatMessage({ id: `label_${index}` });\n","// extracted by mini-css-extract-plugin\nexport var card = \"card-module--card--AW7L7\";\nexport var cardWithCar = \"card-module--cardWithCar--QTCrW\";\nexport var cardWithoutCar = \"card-module--cardWithoutCar--pz3k-\";\nexport var marginCard = \"card-module--marginCard--jim8H\";\nexport var iconButtonContainer = \"card-module--iconButtonContainer--xwwBp\";\nexport var iconButton = \"card-module--iconButton--6jHbY\";\nexport var carLabelContainer = \"card-module--carLabelContainer--JqU4J\";\nexport var carLabel = \"card-module--carLabel--6niFa\";\nexport var carLabelEdit = \"card-module--carLabelEdit--YmSNp\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as cardStyles from './card.module.scss';\n\nexport const Card = ({\n  empty, marginCard, index, edit, render, editButtonId, label, onLabelChanged,\n}) => {\n  const classCard = [cardStyles.card];\n  if (marginCard) {\n    classCard.push(cardStyles.marginCard);\n  }\n  if (empty) {\n    classCard.push(cardStyles.cardWithoutCar);\n  } else {\n    classCard.push(cardStyles.cardWithCar);\n  }\n\n  const [editedLabel, setEditedLabel] = useState(label);\n  const [editModeLabel, setEditModeLabel] = useState(false);\n  const labelChanged = ({ target: { value: newLabel } }) => setEditedLabel(newLabel);\n  const enableEditModeLabel = () => {\n    setEditModeLabel(true);\n  };\n  const saveLabel = () => {\n    setEditModeLabel(false);\n    onLabelChanged(editedLabel);\n  };\n  const cancelEditModeLabel = () => {\n    setEditedLabel(label);\n    setEditModeLabel(false);\n  };\n\n  const carLabelClasses = [cardStyles.carLabel, 'badge'];\n  if (onLabelChanged) { // if function is not null, it's because a car was selected so we can show \"edit label\" button\n    carLabelClasses.push(cardStyles.carLabelEdit);\n  }\n\n  return (\n    <div className={classCard.join(' ')}>\n      <div id={editButtonId} className={cardStyles.iconButtonContainer}>\n        <button type=\"button\" className={`${cardStyles.iconButton} icon-button`} onClick={() => edit(index)}>\n          <FontAwesomeIcon icon=\"edit\" />\n        </button>\n      </div>\n      {render()}\n      <div className={[cardStyles.carLabelContainer, 'container', 'is-fluid'].join(' ')}>\n        <div className={carLabelClasses.join(' ')}>\n          {\n            editModeLabel && (\n              <p className=\"control has-text-dark\" style={{ display: 'flex' }}>\n                <input\n                  id=\"search-input\"\n                  type=\"text\"\n                  onChange={labelChanged}\n                  className=\"input\"\n                  style={{ flex: 1 }}\n                  value={editedLabel}\n                />\n                <button type=\"button\" className={`${cardStyles.iconButton} icon-button`} onClick={cancelEditModeLabel}>\n                  <FontAwesomeIcon icon=\"times\" />\n                </button>\n                <button type=\"button\" className={`${cardStyles.iconButton} icon-button`} onClick={saveLabel}>\n                  <FontAwesomeIcon icon=\"check\" />\n                </button>\n              </p>\n            )\n          }\n          {\n            !editModeLabel && (\n              <>\n                <div style={{ flex: 1 }}>{label}</div>\n                {\n                  onLabelChanged && (\n                    <button\n                      type=\"button\"\n                      className={`${cardStyles.iconButton} icon-button`}\n                      onClick={enableEditModeLabel}\n                    >\n                      <FontAwesomeIcon icon=\"edit\" />\n                    </button>\n                  )\n                }\n              </>\n            )\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  label: PropTypes.string.isRequired,\n  marginCard: PropTypes.bool,\n  empty: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  edit: PropTypes.func.isRequired,\n  render: PropTypes.func.isRequired,\n  editButtonId: PropTypes.string.isRequired,\n  onLabelChanged: PropTypes.func,\n};\n\nCard.defaultProps = {\n  marginCard: false,\n  empty: false,\n  onLabelChanged: null,\n};\n","// extracted by mini-css-extract-plugin\nexport var titleContainer = \"title-module--titleContainer---5d8a\";\nexport var title = \"title-module--title--r60k3\";\nexport var chromeText = \"title-module--chromeText--7MXR9\";\nexport var subTitle = \"title-module--subTitle--zEB3E\";","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useIntl } from 'gatsby-plugin-react-intl';\nimport * as titleStyles from './title.module.scss';\n\nexport const Title = () => {\n  const intl = useIntl();\n\n  const titleAnimation = {\n    backgroundImage: [\n      'linear-gradient(to right, #EEE, #666, #444)',\n      'linear-gradient(to right, #666, #EEE, #666)',\n      'linear-gradient(to right, #666, #666, #EEE)',\n      'linear-gradient(to right, #CCC, #EEE, #CCC)',\n    ],\n  };\n\n  const titleTransition = {\n    duration: 1,\n    ease: 'easeInOut',\n  };\n\n  return (\n    <div className={[titleStyles.titleContainer, 'badge'].join(' ')}>\n      <h1 className={[titleStyles.title].join(' ')}>\n        <motion.div\n          className={titleStyles.chromeText}\n          animate={titleAnimation}\n          transition={titleTransition}\n        >\n          { intl.formatMessage({ id: 'components.title.title' }) }\n        </motion.div>\n      </h1>\n      <h4 className={titleStyles.subTitle}>{ intl.formatMessage({ id: 'components.title.subtitle' }) }</h4>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var imageLink = \"spec-module--imageLink--3ohmX\";\nexport var name = \"spec-module--name--BQfgD\";\nexport var specContainer = \"spec-module--specContainer--awvy8\";\nexport var bar = \"spec-module--bar--uDrBt\";\nexport var barWeight = \"spec-module--barWeight---tOOB\";\nexport var barPower = \"spec-module--barPower--W-y-W\";\nexport var barRatio = \"spec-module--barRatio--Gdo76\";\nexport var barTitle = \"spec-module--barTitle--upkwU\";","import React from 'react';\nimport Uri from 'jsuri';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'gatsby-plugin-react-intl';\nimport * as specStyles from './spec.module.scss';\nimport { extractHostname } from '../../functions/url';\n\nconst POWER_MAX = 1200; // max 1200hp, else overflow\nconst WEIGHT_MAX = 2500; // max 2500kg, else overflow\nconst RATIO_MAX = 20; // max 1kg/hp else overflow\n\nconst Spec = ({\n  power, weight, officialWeight, imageUrl,\n}) => {\n  const intl = useIntl();\n\n  const theWeight = weight || officialWeight;\n\n  const theWeightLabel = weight\n    ? intl.formatMessage({ id: 'components.spec.observed_weight' })\n    : intl.formatMessage({ id: 'components.spec.official_weight' });\n\n  const ratio = Math.round((theWeight * 10) / power) / 10;\n\n  const barPowerStyle = {\n    width: `${(power * 100) / POWER_MAX}%`,\n  };\n\n  const barWeightStyle = {\n    width: `${(theWeight * 100) / WEIGHT_MAX}%`,\n  };\n\n  const barRatioStyle = {\n    width: `${(ratio * 100) / RATIO_MAX}%`,\n  };\n\n  const imageUri = new Uri(imageUrl);\n  const imageOrigin = extractHostname(imageUri.uriParts.host);\n\n  const powerUnit = intl.formatMessage({ id: 'components.spec.hp' });\n\n  return (\n      <section className={specStyles.specContainer}>\n        <div className={specStyles.barTitle}>\n          <legend>{ intl.formatMessage({ id: 'components.spec.power' }) }</legend>\n          <span>\n            <span>{power}</span>\n            { powerUnit }\n          </span>\n        </div>\n        <div className={[specStyles.bar, specStyles.barPower].join(' ')} style={barPowerStyle} />\n        <div className={specStyles.barTitle}>\n          <legend>{ theWeightLabel}</legend>\n          <span>\n            <span>{theWeight}</span>\n            kg\n          </span>\n        </div>\n        <div className={[specStyles.bar, specStyles.barWeight].join(' ')} style={barWeightStyle} />\n        <div className={specStyles.barTitle}>\n          <legend>{ intl.formatMessage({ id: 'components.spec.ratio' }) }</legend>\n          <span>\n            <span>{ratio}</span>\n            { `kg/${powerUnit}` }\n          </span>\n        </div>\n        <div className={[specStyles.bar, specStyles.barRatio].join(' ')} style={barRatioStyle} />\n        <legend>\n          Source :&nbsp;\n          <a href=\"http://weightcars-fr.com\">weightcars-fr.com</a>\n        </legend>\n        {imageOrigin && (\n          <legend>\n            Photo :&nbsp;\n            <a href={`http://${imageOrigin}`}>{imageOrigin}</a>\n          </legend>\n        )}\n      </section>\n  );\n};\n\nSpec.propTypes = {\n  power: PropTypes.number.isRequired,\n  weight: PropTypes.number,\n  officialWeight: PropTypes.number.isRequired,\n  imageUrl: PropTypes.string,\n};\n\nSpec.defaultProps = {\n  weight: null,\n  imageUrl: null,\n};\n\nexport default Spec;\n","// extracted by mini-css-extract-plugin\nexport var card = \"car-module--card--TBmaA\";\nexport var image = \"car-module--image--4+-yy\";\nexport var imageContainer = \"car-module--imageContainer--2kl+h\";\nexport var switchButtons = \"car-module--switchButtons--1qPIa\";\nexport var iconButton = \"car-module--iconButton--CvMbI\";\nexport var carCaption = \"car-module--carCaption--ZUVKV\";\nexport var carYear = \"car-module--carYear--TqbvK\";\nexport var carTitle = \"car-module--carTitle--To4bV\";\nexport var carLongLabel = \"car-module--carLongLabel--D4JlF\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { motion } from 'framer-motion';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Spec from './spec';\nimport { fullname } from '../../functions/cars';\nimport * as carStyles from './car.module.scss';\n\nexport const Car = ({ car }) => {\n  const carFullname = fullname(car);\n\n  const [currentPageIndex, setCurrentPageIndex] = useState(0);\n\n  const imageUrl = `/images/${car.mongodb_id}-resized.jpg`;\n\n  const clickLeft = () => {\n    setCurrentPageIndex(currentPageIndex - 1);\n  };\n\n  const clickRight = () => {\n    setCurrentPageIndex(currentPageIndex + 1);\n  };\n\n  let divContent = null;\n  if (currentPageIndex === 0) {\n    divContent = (\n      <motion.img\n        src={imageUrl}\n        className={carStyles.image}\n        alt={carFullname}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n      />\n    );\n  } else {\n    divContent = (\n      <Spec\n        brand={car.model.brand.name}\n        variant={car.variant}\n        power={car.power}\n        weight={car.weight}\n        officialWeight={car.officialWeight}\n        startYear={car.startYear}\n        imageUrl={car.selectedFavcarsUrl}\n      />\n    );\n  }\n\n  return (\n    <article className={carStyles.card}>\n\n      <div href={car.imageUrl} className={carStyles.imageContainer}>\n        { divContent }\n      </div>\n\n      <div className={carStyles.carCaption}>\n        <div className={carStyles.switchButtons}>\n          {\n            currentPageIndex === 1\n            && (\n              <button type=\"button\" className={['icon-button', 'icon', carStyles.iconButton].join(' ')}>\n                <FontAwesomeIcon icon=\"image\" size=\"2x\" onClick={clickLeft} />\n              </button>\n            )\n          }\n          {\n            currentPageIndex === 0\n            && (\n            <button type=\"button\" className={['icon-button', 'icon', carStyles.iconButton].join(' ')}>\n              <FontAwesomeIcon icon=\"exchange-alt\" size=\"2x\" onClick={clickRight} />\n            </button>\n            )\n          }\n        </div>\n        <div className={carStyles.carTitle}>\n          <h3 className={carStyles.carLongLabel} title={carFullname}>{carFullname}</h3>\n        </div>\n        <div className={carStyles.carYear}>{car.startYear}</div>\n      </div>\n\n    </article>\n  );\n};\n\nCar.propTypes = {\n  car: PropTypes.shape({\n    mongodb_id: PropTypes.string.isRequired,\n    variant: PropTypes.string.isRequired,\n    power: PropTypes.number,\n    officialWeight: PropTypes.number,\n    weight: PropTypes.number,\n    options: PropTypes.string,\n    startYear: PropTypes.string,\n    endYear: PropTypes.string,\n    imageUrl: PropTypes.string,\n    selectedFavcarsUrl: PropTypes.string,\n    model: PropTypes.shape({\n      brand: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      }),\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import Uri from 'jsuri';\nimport PropTypes, { func } from 'prop-types';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { graphql } from 'gatsby';\nimport { injectIntl, navigate } from 'gatsby-plugin-react-intl';\nimport { eachCarIndex, fullname, CarsContext } from '../functions/cars';\nimport { getSavedGarages, save, shouldSave } from '../functions/storage';\nimport { processEditParams, getCarParams, addCarsToParams, extractRelativePathWithParams } from '../functions/url';\nimport * as indexStyles from './index.module.scss';\nimport { carLabels } from '../constants';\nimport { Card } from '../components/utils/card';\nimport { Title } from '../components/title/title';\nimport { Layout } from '../components/layout';\nimport { SEO } from '../components/seo/seo';\nimport { Car } from '../components/car/car';\nimport './bulma-theme.scss';\n\nconst carComponentId = index => `car-${index}`;\nconst editButtonId = index => `edit-${index}`;\n\nconst Garage = ({ location, intl, data }) => {\n  const [cars, setCars] = useState([]);\n\n  const initUri = new Uri(location.href);\n  initUri.setHost(null);\n  initUri.setPort(null);\n  const [uri, setUri] = useState(initUri);\n\n  // if edit=X parameter, save car to carX parameter\n  const hasEditParams = processEditParams(uri);\n  const [saveState, setSaveState] = useState({\n    saveMessage: null,\n    saveOk: !hasEditParams,\n  });\n  const contextValue = useMemo(() => [cars, setCars], [cars, setCars])\n  const { saveOk, saveMessage } = saveState;\n  useEffect(() => {\n    // add missing params + save state\n    const windowGlobal = typeof window !== 'undefined' && window;\n    const newCars = [...cars];\n    if (windowGlobal) {\n      // Priority to URL if user copy paste shared garage\n      const carParams = getCarParams(uri);\n      carParams.forEach((param, idx) => {\n        newCars[idx] = null;\n\n        if (param) {\n          const { carId, carLabel } = param;\n\n          if (carId) {\n            const foundNode = data.allMongodbBmbu7Ynqra11RqiCars.edges\n              .find(({ node: car }) => car.mongodb_id === carId);\n\n            if (foundNode) {\n              newCars[idx] = foundNode.node;\n              newCars[idx].label = carLabel ? carLabel : carLabels(idx + 1, intl);\n            }\n          }\n        }\n      });\n\n      // If no car found in url, load 1st garage from storage\n      if (!newCars.some(car => !!car)) {\n        const savedGarages = getSavedGarages();\n        if (savedGarages.length > 0) {\n          newCars.push(...savedGarages);\n          const newUri = addCarsToParams(newCars, initUri);\n          setUri(newUri);\n        }\n      }\n      setCars(newCars);\n    }\n\n    // Save button enabled?\n    setSaveState({ saveOk: !windowGlobal || !shouldSave(newCars) });\n\n\n    if (windowGlobal) {\n      history.pushState({ foo: 'bar' }, '', uri.path());\n      setTimeout(() => {\n        eachCarIndex(editButtonIdx => {\n          const editButton = document.querySelector(`#${editButtonId(editButtonIdx + 1)}`);\n          if (editButton) {\n            editButton.style.opacity = '1';\n          }\n        });\n      }, 200);\n    }\n  }, []);\n\n  // Click on edit button on a car's card \n  const editCar = index => {\n    const newUri = new Uri(uri.toString());\n    newUri.setPath('/browse');\n    newUri.addQueryParam('edit', index);\n    navigate(extractRelativePathWithParams(newUri));\n  };\n\n  // Click on save button of a car's card label\n  const editCardLabel = (index, newLabel) => {\n    const newCars = [...cars];\n    newCars[index].label = newLabel;\n    const newUri = addCarsToParams(newCars, uri);\n    setCars(newCars);\n    setSaveState({ saveOk: !shouldSave(cars) });\n    setUri(newUri);\n    history.pushState({ foo: 'bar' }, '', newUri.path());\n  };\n\n  const transform = (car, index) => {\n    const thumbnail = car ? (\n      <Car\n        id={carComponentId(index)}\n        className={indexStyles.carComponent}\n        car={car}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n      />\n    ) : (\n      <div className={indexStyles.noCarThumbnail}>?</div>\n    );\n    return (\n      <Card\n        key={`card-${car ? car.mongodb_id : index}`}\n        marginCard={index === 2}\n        empty={!car}\n        index={index}\n        label={car ? car.label : carLabels(index, intl)}\n        edit={editCar}\n        render={() => (thumbnail)}\n        editButtonId={editButtonId(index)}\n        onLabelChanged={car ? newLabel => editCardLabel(index - 1, newLabel) : null}\n      />\n    );\n  };\n\n  const carElements = cars.map((car, idx) => transform(car, idx + 1));\n\n  // Click on garage save button\n  const onSave = () => {\n    if (!saveOk) {\n      const garageName = save(cars);\n      const newUri = addCarsToParams(cars, uri);\n      const savedMessage = intl.formatMessage({ id: 'pages.index.garage_saved' });\n      setSaveState({ saveOk: true, saveMessage: `${savedMessage} \"${garageName}\"` });\n      setUri(newUri);\n      setTimeout(() => setSaveState({ saveMessage: null }), 2000); // message will be displayed during 2s\n    }\n  };\n\n  const title = cars.map(car => (car ? fullname(car) : null))\n    .filter(s => !!s)\n    .join('\\n');\n\n  return (\n    <CarsContext.Provider value={contextValue}>\n      <Layout\n        location={uri.toString()}\n        save={onSave}\n        title={title}\n        uri={uri.toString()}\n        saveDisabled={saveOk}\n        saveMessage={saveMessage}\n        showButtons\n      >\n        <SEO\n          location={location.pathname}\n          title={title}\n          uri={uri.toString()}\n          description={intl.formatMessage({ id: 'pages.index.meta.description' })}\n        />\n        <Title />\n        <article className={indexStyles.carsContainer}>\n          {carElements}\n        </article>\n      </Layout>\n    </CarsContext.Provider>\n  );\n};\n\nGarage.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiCars: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            mongodb_id: PropTypes.string.isRequired,\n            variant: PropTypes.string.isRequired,\n            power: PropTypes.number,\n            officialWeight: PropTypes.number,\n            weight: PropTypes.number,\n            options: PropTypes.string,\n            startYear: PropTypes.string,\n            endYear: PropTypes.string,\n            imageUrl: PropTypes.string,\n            selectedFavcarsUrl: PropTypes.string,\n            model: PropTypes.shape({\n              brand: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n              }),\n              name: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n  intl: PropTypes.shape({\n    formatMessage: func.isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`query {\n    allMongodbBmbu7Ynqra11RqiCars {\n    edges {\n      node {\n          mongodb_id,\n          variant,\n          power,\n          officialWeight, \n          weight,\n          options,\n          startYear,\n          endYear,\n          imageUrl,\n          selectedFavcarsUrl,\n          model {\n              brand {\n                  name\n              }\n            name\n          }\n        }\n      }\n    }\n  }`;\n\nexport default injectIntl(Garage);\n","// extracted by mini-css-extract-plugin\nexport var carsContainer = \"index-module--carsContainer--1c+rf\";\nexport var noCarThumbnail = \"index-module--noCarThumbnail--ma6Fw\";\nexport var carComponent = \"index-module--carComponent--2sxy5\";"],"names":["carLabels","index","intl","formatMessage","id","iconButton","carLabelContainer","Card","empty","marginCard","edit","render","editButtonId","label","onLabelChanged","classCard","push","useState","editedLabel","setEditedLabel","editModeLabel","setEditModeLabel","carLabelClasses","className","join","type","cardStyles","onClick","icon","style","display","onChange","newLabel","target","value","flex","defaultProps","titleContainer","title","Title","useIntl","titleStyles","animate","backgroundImage","transition","duration","ease","bar","barWeight","barPower","barRatio","barTitle","Spec","power","weight","officialWeight","imageUrl","theWeight","theWeightLabel","ratio","Math","round","barPowerStyle","width","barWeightStyle","barRatioStyle","imageUri","Uri","imageOrigin","extractHostname","uriParts","host","powerUnit","specStyles","href","Car","car","carFullname","fullname","currentPageIndex","setCurrentPageIndex","mongodb_id","divContent","src","alt","initial","opacity","brand","model","name","variant","startYear","selectedFavcarsUrl","carStyles","size","carComponentId","injectIntl","location","data","cars","setCars","initUri","setHost","setPort","uri","setUri","hasEditParams","processEditParams","saveMessage","saveOk","saveState","setSaveState","contextValue","useMemo","useEffect","windowGlobal","window","newCars","getCarParams","forEach","param","idx","carId","carLabel","foundNode","allMongodbBmbu7Ynqra11RqiCars","edges","find","node","some","savedGarages","getSavedGarages","length","newUri","addCarsToParams","shouldSave","history","pushState","foo","path","setTimeout","eachCarIndex","editButtonIdx","editButton","document","querySelector","editCar","toString","setPath","addQueryParam","navigate","extractRelativePathWithParams","transform","thumbnail","key","editCardLabel","carElements","map","filter","s","save","garageName","savedMessage","saveDisabled","showButtons","pathname","description"],"sourceRoot":""}