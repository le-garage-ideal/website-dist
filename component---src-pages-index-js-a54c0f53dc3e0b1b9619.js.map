{"version":3,"sources":["webpack:///./src/functions/url.js","webpack:///./src/constants.js","webpack:///./src/components/utils/card.js","webpack:///./src/components/title/title.js","webpack:///./src/components/car/spec.js","webpack:///./src/components/car/car.js","webpack:///./src/pages/index.js"],"names":["labelKey","carKey","addCarsToParams","cars","uri","newUri","Uri","toString","eachCar","idx","replaceQueryParam","mongodb_id","label","carLabels","index","intl","formatMessage","id","Card","empty","marginCard","edit","render","editButtonId","onLabelChanged","classCard","cardStyles","card","push","cardWithoutCar","cardWithCar","useState","editedLabel","setEditedLabel","editModeLabel","setEditModeLabel","carLabelClasses","carLabel","carLabelEdit","className","join","iconButtonContainer","type","iconButton","onClick","icon","carLabelContainer","style","display","onChange","newLabel","target","value","flex","defaultProps","Title","useIntl","titleStyles","titleContainer","title","div","chromeText","animate","backgroundImage","transition","duration","ease","subTitle","Spec","power","weight","officialWeight","imageUrl","theWeight","theWeightLabel","ratio","Math","round","barPowerStyle","width","barWeightStyle","barRatioStyle","imageOrigin","fullHost","indexOfLastDot","lastIndexOf","tld","substr","domainName","indexOfSecondDot","extractHostname","uriParts","host","powerUnit","specStyles","specContainer","barTitle","bar","barPower","barWeight","barRatio","href","Car","car","carFullname","fullname","currentPageIndex","setCurrentPageIndex","divContent","img","src","carStyles","image","alt","initial","opacity","brand","model","name","variant","startYear","selectedFavcarsUrl","imageContainer","carCaption","switchButtons","size","carTitle","carLongLabel","carYear","carComponentId","Garage","props","location","initState","saveMessage","saveOk","editParam","getQueryParamValue","carParam","deleteQueryParam","processEditParams","windowGlobal","window","carId","map","element","getCarParams","forEach","param","foundNode","data","allMongodbBmbu7Ynqra11RqiCars","edges","find","node","some","savedGarages","getSavedGarages","length","shouldSave","state","history","pushState","foo","setTimeout","eachCarIndex","editButtonIdx","editButton","document","querySelector","this","editCar","setPath","addQueryParam","transform","thumbnail","indexStyles","carComponent","noCarThumbnail","key","newCars","setState","editCardLabel","carElements","filter","s","save","garageName","savedMessage","saveDisabled","showButtons","pathname","description","carsContainer","React","Component","query","injectIntl"],"mappings":"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","file":"component---src-pages-index-js-a54c0f53dc3e0b1b9619.js","sourcesContent":["import Uri from 'jsuri';\nimport { eachCar } from './cars';\n\nexport const extractHostname = fullHost => {\n  let imageOrigin = null;\n  if (fullHost) {\n    const indexOfLastDot = fullHost.lastIndexOf('.');\n    if (indexOfLastDot >= 0) {\n      const tld = fullHost.substr(indexOfLastDot);\n      const domainName = fullHost.substr(0, indexOfLastDot);\n      const indexOfSecondDot = domainName.lastIndexOf('.');\n      let hostname = null;\n      if (indexOfSecondDot >= 0) {\n        hostname = domainName.substr(indexOfSecondDot + 1);\n      } else {\n        hostname = domainName;\n      }\n      imageOrigin = `${hostname}${tld}`;\n    }\n  }\n  return imageOrigin;\n};\n\n// When URL contains car edit params from previous car select page:\n//  - add the selected car to URL\n//  - clear edit params\n//  - return true\nexport const processEditParams = uri => {\n  const editParam = uri.getQueryParamValue('edit');\n  const carParam = uri.getQueryParamValue('car');\n  if (editParam && carParam) {\n    uri.deleteQueryParam('edit');\n    uri.deleteQueryParam('car');\n    uri.replaceQueryParam(`car${editParam}`, carParam);\n    return true;\n  }\n  return false;\n};\n\nconst labelKey = carKey => `${carKey}-label`;\n\nexport const getCarParams = uri => {\n  const result = eachCar(carKey => ({\n    carId: uri.getQueryParamValue(carKey),\n    carLabel: uri.getQueryParamValue(labelKey(carKey)),\n  }))\n  .map(element => element.carId ? element : null);\n  return result;\n};\n\nexport const addCarsToParams = (cars, uri) => {\n  const newUri = new Uri(uri.toString())\n  eachCar((carKey, idx) => {\n    if (cars[idx]) {\n      newUri.replaceQueryParam(carKey, cars[idx].mongodb_id);\n      newUri.replaceQueryParam(labelKey(carKey), cars[idx].label);\n    }\n  });\n  return newUri;\n};\n\n","export const carLabels = (index, intl) => intl.formatMessage({ id: `label_${index}` });\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport cardStyles from './card.module.scss';\n\nexport const Card = ({\n  empty, marginCard, index, edit, render, editButtonId, label, onLabelChanged,\n}) => {\n  const classCard = [cardStyles.card];\n  if (marginCard) {\n    classCard.push(cardStyles.marginCard);\n  }\n  if (empty) {\n    classCard.push(cardStyles.cardWithoutCar);\n  } else {\n    classCard.push(cardStyles.cardWithCar);\n  }\n\n  const [editedLabel, setEditedLabel] = useState(label);\n  const [editModeLabel, setEditModeLabel] = useState(false);\n  const labelChanged = ({ target: { value: newLabel } }) => setEditedLabel(newLabel);\n  const enableEditModeLabel = () => {\n    setEditModeLabel(true);\n  };\n  const saveLabel = () => {\n    setEditModeLabel(false);\n    onLabelChanged(editedLabel);\n  };\n  const cancelEditModeLabel = () => {\n    setEditedLabel(label);\n    setEditModeLabel(false);\n  };\n\n  const carLabelClasses = [cardStyles.carLabel, 'badge'];\n  if (onLabelChanged) { // if function is not null, it's because a car was selected so we can show \"edit label\" button\n    carLabelClasses.push(cardStyles.carLabelEdit);\n  }\n\n  return (\n    <div className={classCard.join(' ')}>\n      <div id={editButtonId} className={cardStyles.iconButtonContainer}>\n        <button type=\"button\" className={`${cardStyles.iconButton} icon-button`} onClick={() => edit(index)}>\n          <FontAwesomeIcon icon=\"edit\" />\n        </button>\n      </div>\n      {render()}\n      <div className={[cardStyles.carLabelContainer, 'container', 'is-full'].join(' ')}>\n        <div className={carLabelClasses.join(' ')}>\n          {\n            editModeLabel && (\n              <p className=\"control has-text-dark\" style={{ display: 'flex' }}>\n                <input\n                  id=\"search-input\"\n                  type=\"text\"\n                  onChange={labelChanged}\n                  className=\"input\"\n                  style={{ flex: 1 }}\n                  value={editedLabel}\n                />\n                <button type=\"button\" className={`${cardStyles.iconButton} icon-button`} onClick={cancelEditModeLabel}>\n                  <FontAwesomeIcon icon=\"times\" />\n                </button>\n                <button type=\"button\" className={`${cardStyles.iconButton} icon-button`} onClick={saveLabel}>\n                  <FontAwesomeIcon icon=\"check\" />\n                </button>\n              </p>\n            )\n          }\n          {\n            !editModeLabel && (\n              <>\n                <div style={{ flex: 1 }}>{label}</div>\n                {\n                  onLabelChanged && (\n                    <button\n                      type=\"button\"\n                      className={`${cardStyles.iconButton} icon-button`}\n                      onClick={enableEditModeLabel}\n                    >\n                      <FontAwesomeIcon icon=\"edit\" />\n                    </button>\n                  )\n                }\n              </>\n            )\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  label: PropTypes.string.isRequired,\n  marginCard: PropTypes.bool,\n  empty: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  edit: PropTypes.func.isRequired,\n  render: PropTypes.func.isRequired,\n  editButtonId: PropTypes.string.isRequired,\n  onLabelChanged: PropTypes.func,\n};\n\nCard.defaultProps = {\n  marginCard: false,\n  empty: false,\n  onLabelChanged: null,\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useIntl } from 'gatsby-plugin-intl';\nimport titleStyles from './title.module.scss';\n\nexport const Title = () => {\n  const intl = useIntl();\n\n  const titleAnimation = {\n    backgroundImage: [\n      'linear-gradient(to right, #EEE, #666, #444)',\n      'linear-gradient(to right, #666, #EEE, #666)',\n      'linear-gradient(to right, #666, #666, #EEE)',\n      'linear-gradient(to right, #CCC, #EEE, #CCC)',\n    ],\n  };\n\n  const titleTransition = {\n    duration: 1,\n    ease: 'easeInOut',\n  };\n\n  return (\n    <div className={[titleStyles.titleContainer, 'badge'].join(' ')}>\n      <h1 className={[titleStyles.title].join(' ')}>\n        <motion.div\n          className={titleStyles.chromeText}\n          animate={titleAnimation}\n          transition={titleTransition}\n        >\n          { intl.formatMessage({ id: 'components.title.title' }) }\n        </motion.div>\n      </h1>\n      <h4 className={titleStyles.subTitle}>{ intl.formatMessage({ id: 'components.title.subtitle' }) }</h4>\n    </div>\n  );\n};\n","import React from 'react';\nimport Uri from 'jsuri';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'gatsby-plugin-intl';\nimport specStyles from './spec.module.scss';\nimport { extractHostname } from '../../functions/url';\n\nconst POWER_MAX = 1200; // max 1200hp, else overflow\nconst WEIGHT_MAX = 2500; // max 2500kg, else overflow\nconst RATIO_MAX = 20; // max 1kg/hp else overflow\n\nconst Spec = ({\n  power, weight, officialWeight, imageUrl,\n}) => {\n  const intl = useIntl();\n\n  const theWeight = weight || officialWeight;\n\n  const theWeightLabel = weight\n    ? intl.formatMessage({ id: 'components.spec.observed_weight' })\n    : intl.formatMessage({ id: 'components.spec.official_weight' });\n\n  const ratio = Math.round((theWeight * 10) / power) / 10;\n\n  const barPowerStyle = {\n    width: `${(power * 100) / POWER_MAX}%`,\n  };\n\n  const barWeightStyle = {\n    width: `${(theWeight * 100) / WEIGHT_MAX}%`,\n  };\n\n  const barRatioStyle = {\n    width: `${(ratio * 100) / RATIO_MAX}%`,\n  };\n\n  const imageUri = new Uri(imageUrl);\n  const imageOrigin = extractHostname(imageUri.uriParts.host);\n\n  const powerUnit = intl.formatMessage({ id: 'components.spec.hp' });\n\n  return (\n      <section className={specStyles.specContainer}>\n        <div className={specStyles.barTitle}>\n          <legend>{ intl.formatMessage({ id: 'components.spec.power' }) }</legend>\n          <span>\n            <span className={specStyles.power}>{power}</span>\n            { powerUnit }\n          </span>\n        </div>\n        <div className={[specStyles.bar, specStyles.barPower].join(' ')} style={barPowerStyle} />\n        <div className={specStyles.barTitle}>\n          <legend>{ theWeightLabel}</legend>\n          <span>\n            <span className={specStyles.weight}>{theWeight}</span>\n            kg\n          </span>\n        </div>\n        <div className={[specStyles.bar, specStyles.barWeight].join(' ')} style={barWeightStyle} />\n        <div className={specStyles.barTitle}>\n          <legend>{ intl.formatMessage({ id: 'components.spec.ratio' }) }</legend>\n          <span>\n            <span className={specStyles.ratio}>{ratio}</span>\n            { `kg/${powerUnit}` }\n          </span>\n        </div>\n        <div className={[specStyles.bar, specStyles.barRatio].join(' ')} style={barRatioStyle} />\n        <legend>\n          Source :&nbsp;\n          <a href=\"http://weightcars-fr.com\">weightcars-fr.com</a>\n        </legend>\n        {imageOrigin && (\n          <legend>\n            Photo :&nbsp;\n            <a href={`http://${imageOrigin}`}>{imageOrigin}</a>\n          </legend>\n        )}\n      </section>\n  );\n};\n\nSpec.propTypes = {\n  power: PropTypes.number.isRequired,\n  weight: PropTypes.number,\n  officialWeight: PropTypes.number.isRequired,\n  imageUrl: PropTypes.string,\n};\n\nSpec.defaultProps = {\n  weight: null,\n  imageUrl: null,\n};\n\nexport default Spec;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { motion } from 'framer-motion';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport carStyles from './car.module.scss';\nimport Spec from './spec';\nimport { fullname } from '../../functions/cars';\n\nexport const Car = ({ car }) => {\n  const carFullname = fullname(car);\n\n  const [currentPageIndex, setCurrentPageIndex] = useState(0);\n\n  const imageUrl = `/images/${car.mongodb_id}-resized.jpg`;\n\n  const clickLeft = () => {\n    setCurrentPageIndex(currentPageIndex - 1);\n  };\n\n  const clickRight = () => {\n    setCurrentPageIndex(currentPageIndex + 1);\n  };\n\n  let divContent = null;\n  if (currentPageIndex === 0) {\n    divContent = (\n      <motion.img\n        src={imageUrl}\n        className={carStyles.image}\n        alt={carFullname}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n      />\n    );\n  } else {\n    divContent = (\n      <Spec\n        brand={car.model.brand.name}\n        variant={car.variant}\n        power={car.power}\n        weight={car.weight}\n        officialWeight={car.officialWeight}\n        startYear={car.startYear}\n        imageUrl={car.selectedFavcarsUrl}\n      />\n    );\n  }\n\n  return (\n    <article className={carStyles.card}>\n\n      <div href={car.imageUrl} className={carStyles.imageContainer}>\n        { divContent }\n      </div>\n\n      <div className={carStyles.carCaption}>\n        <div className={carStyles.switchButtons}>\n          {\n            currentPageIndex === 1\n            && (\n              <button type=\"button\" className={['icon-button', 'icon', carStyles.iconButton].join(' ')}>\n                <FontAwesomeIcon icon=\"image\" size=\"2x\" onClick={clickLeft} />\n              </button>\n            )\n          }\n          {\n            currentPageIndex === 0\n            && (\n            <button type=\"button\" className={['icon-button', 'icon', carStyles.iconButton].join(' ')}>\n              <FontAwesomeIcon icon=\"exchange-alt\" size=\"2x\" onClick={clickRight} />\n            </button>\n            )\n          }\n        </div>\n        <div className={carStyles.carTitle}>\n          <h3 className={carStyles.carLongLabel} title={carFullname}>{carFullname}</h3>\n        </div>\n        <div className={carStyles.carYear}>{car.startYear}</div>\n      </div>\n\n    </article>\n  );\n};\n\nCar.propTypes = {\n  car: PropTypes.shape({\n    mongodb_id: PropTypes.string.isRequired,\n    variant: PropTypes.string.isRequired,\n    power: PropTypes.number,\n    officialWeight: PropTypes.number,\n    weight: PropTypes.number,\n    options: PropTypes.string,\n    startYear: PropTypes.string,\n    endYear: PropTypes.string,\n    imageUrl: PropTypes.string,\n    selectedFavcarsUrl: PropTypes.string,\n    model: PropTypes.shape({\n      brand: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      }),\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import Uri from 'jsuri';\nimport PropTypes, { func } from 'prop-types';\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport { injectIntl } from 'gatsby-plugin-intl';\nimport './bulma-theme.scss';\nimport { eachCarIndex, fullname } from '../functions/cars';\nimport { getSavedGarages, save, shouldSave } from '../functions/storage';\nimport { processEditParams, getCarParams, addCarsToParams } from '../functions/url';\nimport indexStyles from './index.module.scss';\nimport { carLabels } from '../constants';\nimport { Card } from '../components/utils/card';\nimport { Title } from '../components/title/title';\nimport { Layout } from '../components/layout';\nimport { SEO } from '../components/seo/seo';\nimport { Car } from '../components/car/car';\n\nconst carComponentId = index => `car-${index}`;\nconst editButtonId = index => `edit-${index}`;\n\nclass Garage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let uri = new Uri(props.location.href);\n\n    // if edit=X parameter, save car to carX parameter\n    const hasEditParams = processEditParams(uri);\n    const initState = {\n      saveMessage: null,\n      saveOk: !hasEditParams,\n    };\n\n    // add missing params + save state\n    const windowGlobal = typeof window !== 'undefined' && window;\n    initState.cars = [];\n    if (windowGlobal) {\n      // Priority to URL if user copy paste shared garage\n      const carParams = getCarParams(uri);\n      carParams.forEach((param, idx) => {\n        initState.cars[idx] = null;\n\n        if (param) { \n          const { carId, carLabel } = param;\n\n          if (carId) {\n            const foundNode = props.data.allMongodbBmbu7Ynqra11RqiCars.edges\n              .find(({ node: car }) => car.mongodb_id === carId);\n\n            if (foundNode) {\n              initState.cars[idx] = foundNode.node;\n              initState.cars[idx].label = carLabel ? carLabel : carLabels(idx + 1, props.intl);\n            }\n          }\n        }\n      });\n\n      // If no car found in url, load 1st garage from storage\n      if (!initState.cars.some(car => !!car)) {\n        const savedGarages = getSavedGarages();\n        if (savedGarages.length > 0) {\n          [initState.cars] = savedGarages;\n          uri = addCarsToParams(initState.cars, uri);\n        }\n      }\n    }\n    initState.uri = uri;\n\n    // Save button enabled?\n    initState.saveOk = !windowGlobal || !shouldSave(initState.cars);\n\n    this.state = initState;\n\n    if (windowGlobal) {\n      history.pushState({foo: 'bar'}, '', uri.toString());\n      setTimeout(() => {\n        eachCarIndex(editButtonIdx => {\n          const editButton = document.querySelector(`#${editButtonId(editButtonIdx + 1)}`);\n          if (editButton) {\n            editButton.style.opacity = '1';\n          }\n        });\n      }, 200);\n    }\n  }\n\n  render() {\n    const {\n      uri, saveOk, cars, saveMessage,\n    } = this.state;\n\n    const {\n      location,\n      intl,\n    } = this.props;\n\n    // Click on edit button on a car's card \n    const editCar = index => {\n      const newUri = new Uri(uri.toString());\n      newUri.setPath('/browse');\n      newUri.addQueryParam('edit', index);\n      window.location.href = newUri.toString();\n    };\n\n    // Click on save button of a car's card label\n    const editCardLabel = (index, newLabel) => {\n      const newCars = [...cars];\n      newCars[index].label = newLabel;\n      const newUri = addCarsToParams(newCars, uri);\n      this.setState({ cars: newCars, saveOk: !shouldSave(cars), uri: newUri });\n      history.pushState({foo: 'bar'}, '', newUri.toString());\n    };\n\n    const transform = (car, index) => {\n      const thumbnail = car ? (\n        <Car\n          id={carComponentId(index)}\n          className={indexStyles.carComponent}\n          car={car}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n        />\n      ) : (\n        <div className={indexStyles.noCarThumbnail}>?</div>\n      );\n      return (\n        <Card\n          key={`card-${car ? car.mongodb_id : index}`}\n          marginCard={index === 2}\n          empty={!car}\n          index={index}\n          label={car ? car.label : carLabels(index, intl)}\n          edit={editCar}\n          render={() => (thumbnail)}\n          editButtonId={editButtonId(index)}\n          onLabelChanged={car ? newLabel => editCardLabel(index - 1, newLabel) : null}\n        />\n      );\n    };\n\n    const carElements = cars.map((car, idx) => transform(car, idx + 1));\n\n    // Click on garage save button\n    const onSave = () => {\n      const garageName = save(cars);\n      const newUri = addCarsToParams(cars, uri);\n      const savedMessage = intl.formatMessage({ id: 'pages.index.garage_saved' });\n      this.setState({ saveOk: true, saveMessage: `${savedMessage} \"${garageName}\"`, uri: newUri });\n      setTimeout(() => this.setState({ saveMessage: null }), 2000); // message will be displayed during 2s\n    };\n\n    const title = cars.map(car => (car ? fullname(car) : null))\n      .filter(s => !!s)\n      .join('\\n');\n\n    return (\n      <Layout\n        location={uri.toString()}\n        save={onSave}\n        title={title}\n        uri={uri.toString()}\n        saveDisabled={saveOk}\n        saveMessage={saveMessage}\n        showButtons\n      >\n        <SEO\n          location={location.pathname}\n          title={title}\n          uri={uri.toString()}\n          description={intl.formatMessage({ id: 'pages.index.meta.description' })}\n        />\n        <Title />\n        <article className={indexStyles.carsContainer}>\n          {carElements}\n        </article>\n      </Layout>\n    );\n  }\n}\n\nGarage.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiCars: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            mongodb_id: PropTypes.string.isRequired,\n            variant: PropTypes.string.isRequired,\n            power: PropTypes.number,\n            officialWeight: PropTypes.number,\n            weight: PropTypes.number,\n            options: PropTypes.string,\n            startYear: PropTypes.string,\n            endYear: PropTypes.string,\n            imageUrl: PropTypes.string,\n            selectedFavcarsUrl: PropTypes.string,\n            model: PropTypes.shape({\n              brand: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n              }),\n              name: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n  intl: PropTypes.shape({\n    formatMessage: func.isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`query {\n    allMongodbBmbu7Ynqra11RqiCars {\n    edges {\n      node {\n          mongodb_id,\n          variant,\n          power,\n          officialWeight, \n          weight,\n          options,\n          startYear,\n          endYear,\n          imageUrl,\n          selectedFavcarsUrl,\n          model {\n              brand {\n                  name\n              }\n            name\n          }\n        }\n      }\n    }\n  }`;\n\nexport default injectIntl(Garage);\n"],"sourceRoot":""}