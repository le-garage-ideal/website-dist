{"version":3,"sources":["webpack:///./src/templates/cars.js"],"names":["query","Cars","data","pageContext","location","intl","useIntl","uri","Uri","href","completeCarList","allMongodbBmbu7Ynqra11RqiCars","edges","map","node","sort","sortCars","useState","filteredCars","setFilteredCars","carComponents","car","imageUrl","mongodb_id","key","id","name","variant","startYear","image","big","onClick","addQueryParam","setPath","window","toString","title","formatMessage","values","brand","model","description","pathname","render","filter","value","filtered","match","RegExp"],"mappings":"wSA8FaA,EAAK,aAmBHC,UAtGF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC3BC,EAAOC,oBAEPC,EAAM,IAAIC,IAAIJ,EAASK,MACvBC,EAAkBR,EAAKS,8BAA8BC,MAAMC,KAAI,qBAAGC,QAAiBC,KAAKC,KAJ9C,EAKRC,mBAASP,GAA1CQ,EALyC,KAK3BC,EAL2B,KAO1CC,EAAgBF,EAAaL,KAAI,SAAAQ,GACrC,IAAMC,EAAQ,WAAcD,EAAIE,WAAlB,eACd,OACE,kBAAC,IAAD,CACEC,IAAKH,EAAIE,WACTE,GAAIJ,EAAIE,WACRG,KAAML,EAAIM,SAAWN,EAAIO,UAAJ,MAAsBP,EAAIO,UAAc,IAC7DC,MAAOP,EACPQ,KAAG,EACHC,QAAS,WACPxB,EAAIyB,cAAc,MAAOX,EAAIE,YAC7BhB,EAAI0B,QAAQ,KACZC,OAAO9B,SAASK,KAAOF,EAAI4B,iBAW7BC,EAAQ/B,EAAKgC,cAAc,CAC/BZ,GAAI,uBACJa,OAAQ,CAAEC,MAAOpC,EAAYoC,MAAOC,MAAOrC,EAAYqC,SAGnDC,EAAcpC,EAAKgC,cAAc,CACrCZ,GAAI,6BACJa,OAAQ,CAAEC,MAAOpC,EAAYoC,MAAOC,MAAOrC,EAAYqC,SAGzD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEjC,IAAKH,EAASK,KACdL,SAAUA,EAASsC,SACnBN,MAAOA,EACPK,YAAaA,IAEf,kBAAC,IAAD,CAAcL,MAAOA,EAAOO,OAAQ,kBAAMvB,GAAewB,OAvB9C,SAAAC,GACb,IAAMC,EAAWpC,EAAgBkC,QAAO,SAAAvB,GAAG,OAAIA,EAAIM,QAAQoB,MAAM,IAAIC,OAAOH,EAAO,SACnF1B,EAAgB2B","file":"component---src-templates-cars-js-477b396cabe248473b29.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Uri from 'jsuri';\nimport { useIntl } from 'gatsby-plugin-intl';\nimport { graphql } from 'gatsby';\nimport { Layout } from '../components/layout';\nimport FilteredList from '../components/utils/filtered-list';\nimport ListItem from '../components/utils/list-item';\nimport { SEO } from '../components/seo/seo';\nimport { sortCars } from '../functions/sort';\n\nconst Cars = ({ data, pageContext, location }) => {\n  const intl = useIntl();\n\n  const uri = new Uri(location.href);\n  const completeCarList = data.allMongodbBmbu7Ynqra11RqiCars.edges.map(({ node }) => node).sort(sortCars);\n  const [filteredCars, setFilteredCars] = useState(completeCarList);\n\n  const carComponents = filteredCars.map(car => {\n    const imageUrl = `/images/${car.mongodb_id}-resized.jpg`;\n    return (\n      <ListItem\n        key={car.mongodb_id}\n        id={car.mongodb_id}\n        name={car.variant + (car.startYear ? ` - ${car.startYear}` : '')}\n        image={imageUrl}\n        big\n        onClick={() => {\n          uri.addQueryParam('car', car.mongodb_id);\n          uri.setPath('/');\n          window.location.href = uri.toString();\n        }}\n      />\n    );\n  });\n\n  const search = value => {\n    const filtered = completeCarList.filter(car => car.variant.match(new RegExp(value, 'i')));\n    setFilteredCars(filtered);\n  };\n\n  const title = intl.formatMessage({\n    id: 'templates.cars.title',\n    values: { brand: pageContext.brand, model: pageContext.model },\n  });\n\n  const description = intl.formatMessage({\n    id: 'templates.cars.description',\n    values: { brand: pageContext.brand, model: pageContext.model },\n  });\n\n  return (\n    <Layout>\n      <SEO\n        uri={location.href}\n        location={location.pathname}\n        title={title}\n        description={description}\n      />\n      <FilteredList title={title} render={() => carComponents} filter={search} />\n    </Layout>\n  );\n};\n\nCars.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiCars: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            mongodb_id: PropTypes.string.isRequired,\n            variant: PropTypes.string.isRequired,\n            startYear: PropTypes.string,\n            model: PropTypes.shape({\n              brand: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n              }),\n              name: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    brand: PropTypes.string.isRequired,\n    model: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`\n    query CarsByModel($brand: String, $model: String) {\n        allMongodbBmbu7Ynqra11RqiCars(filter: {model: {name: {eq: $model}, brand: { name: {eq: $brand}}}}) {\n        edges {\n          node {\n              mongodb_id,\n              variant,\n              startYear,\n              model {\n                  brand {\n                      name\n                  }\n                 name\n              }\n          }\n        }\n      }\n    }`;\n\nexport default Cars;\n"],"sourceRoot":""}