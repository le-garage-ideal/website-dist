{"version":3,"sources":["webpack:///./src/templates/cars.js","webpack:///./src/functions/sort.js"],"names":["data","pageContext","location","uri","Uri","href","completeCarList","schema","edges","map","node","sort","sortCars","useState","filteredCars","setFilteredCars","carComponents","car","imageUrl","mongodb_id","key","id","name","variant","startYear","image","big","onClick","addQueryParam","setPath","window","toString","title","brand","model","pathname","render","filter","value","filtered","match","RegExp","query","a","b","sortField","field"],"mappings":"kTAUe,sBAAoC,IAAlCA,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAC1BC,EAAM,IAAIC,IAAIF,EAASG,MACvBC,EAAkBN,EAAKO,IAAS,QAAQC,MAAMC,KAAI,qBAAEC,QAAgBC,KAAKC,KAFjC,EAGNC,mBAASP,GAA1CQ,EAHuC,KAGzBC,EAHyB,KAMxCC,EAAgBF,EAAaL,KAAI,SAAAQ,GACnC,IAAMC,EAAQ,WAAcD,EAAIE,WAAlB,eACd,OACI,kBAAC,IAAD,CAAUC,IAAKH,EAAIE,WACfE,GAAIJ,EAAIE,WACRG,KAAML,EAAIM,SAAWN,EAAIO,UAAY,MAAQP,EAAIO,UAAY,IAC7DC,MAAOP,EACPQ,KAAK,EACLC,QAAS,WACLxB,EAAIyB,cAAc,MAAOX,EAAIE,YAC7BhB,EAAI0B,QAAQ,KACZC,OAAO5B,SAASG,KAAOF,EAAI4B,iBAWrCC,EAAK,gBAAmB/B,EAAYgC,MAA/B,IAAwChC,EAAYiC,MAE/D,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKhC,SAAUA,EAASiC,SAAUH,MAAOA,IACzC,4BAAKA,GACL,kBAAC,IAAD,CAAcA,MAAOA,EAAOI,OAAQ,kBAAMpB,GAAeqB,OAXlD,SAAAC,GACX,IAAMC,EAAWjC,EAAgB+B,QAAO,SAAApB,GAAG,OAAIA,EAAIM,QAAQiB,MAAM,IAAIC,OAAOH,EAAO,SACnFvB,EAAgBwB,QAejB,IAAMG,EAAK,a,kCCjCH9B,IAhBE,SAAC+B,EAAGC,GACjB,IAAMC,EAAY,SAACF,EAAGC,EAAGE,GACrB,OAAKH,EAAEG,IAAWF,EAAEE,GAGfH,EAAEG,GAGFF,EAAEE,GAGAH,EAAEG,GAASF,EAAEE,IAAU,EAAIH,EAAEG,KAAWF,EAAEE,GAAS,EAAI,EAFnD,GAHC,EAHD,GAUf,OAAwC,IAAjCD,EAAUF,EAAGC,EAAG,aAAqBC,EAAUF,EAAGC,EAAG,WAAaC,EAAUF,EAAGC,EAAG","file":"component---src-templates-cars-js-704d6ad010f1fcc42081.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Uri from 'jsuri';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from \"../components/layout\";\r\nimport FilteredList from \"../components/utils/filtered-list\";\r\nimport ListItem from \"../components/utils/list-item\";\r\nimport SEO from \"../components/seo/seo\";\r\nimport { schema } from '../constants';\r\nimport sortCars from '../functions/sort';\r\n\r\nexport default ({data, pageContext, location}) => {\r\n    const uri = new Uri(location.href);\r\n    const completeCarList = data[schema + 'Cars'].edges.map(({node}) => node).sort(sortCars);\r\n    const [filteredCars, setFilteredCars] = useState(completeCarList);\r\n    \r\n\r\n    const carComponents = filteredCars.map(car => {\r\n        const imageUrl = `/images/${car.mongodb_id}-resized.jpg`;\r\n        return (\r\n            <ListItem key={car.mongodb_id}\r\n                id={car.mongodb_id}\r\n                name={car.variant + (car.startYear ? ' - ' + car.startYear : '')}\r\n                image={imageUrl}\r\n                big={true}\r\n                onClick={() => {\r\n                    uri.addQueryParam('car', car.mongodb_id);\r\n                    uri.setPath('/');\r\n                    window.location.href = uri.toString();\r\n                }}>\r\n            </ListItem>\r\n        )\r\n    });\r\n    \r\n    const search = value => {\r\n        const filtered = completeCarList.filter(car => car.variant.match(new RegExp(value, 'i')));\r\n        setFilteredCars(filtered);\r\n    };\r\n\r\n    const title = `Variantes de ${pageContext.brand} ${pageContext.model}`;\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO location={location.pathname} title={title} />\r\n            <h1>{title}</h1>\r\n            <FilteredList title={title} render={() => carComponents} filter={search} />\r\n        </Layout>\r\n    );\r\n\r\n};\r\n\r\nexport const query = graphql`\r\n    query CarsByModel($brand: String, $model: String) {\r\n        allMongodbBmbu7Ynqra11RqiCars(filter: {model: {name: {eq: $model}, brand: { name: {eq: $brand}}}}) {\r\n        edges {\r\n          node {\r\n              mongodb_id,\r\n              variant,\r\n              power,\r\n              officialWeight, \r\n              weight,\r\n              options,\r\n              startYear,\r\n              endYear,\r\n              model {\r\n                  brand {\r\n                      name\r\n                  }\r\n                 name\r\n              }\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n","\r\nconst sortCars = (a, b) => {\r\n    const sortField = (a, b, field) => {\r\n        if (!a[field] && !b[field]) {\r\n            return 0;\r\n        }\r\n        if (!a[field]) {\r\n            return -1;\r\n        }\r\n        if (!b[field]) {\r\n            return 1;\r\n        }\r\n        return a[field] < b[field] ? -1 : a[field] === b[field] ? 0 : 1;\r\n    }; \r\n    return sortField(a, b, 'startYear') === 0 ? sortField(a, b, 'variant') : sortField(a, b, 'startYear');\r\n};\r\n\r\nexport default sortCars;\r\n"],"sourceRoot":""}