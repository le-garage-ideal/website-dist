{"version":3,"sources":["webpack:///./src/templates/cars.js"],"names":["query","Cars","data","pageContext","location","uri","Uri","href","completeCarList","allMongodbBmbu7Ynqra11RqiCars","edges","map","node","sort","sortCars","useState","filteredCars","setFilteredCars","carComponents","car","imageUrl","mongodb_id","key","id","name","variant","startYear","image","big","onClick","addQueryParam","setPath","window","toString","title","brand","model","pathname","render","filter","value","filtered","match","RegExp"],"mappings":"sSA8EaA,EAAK,aAmBHC,UAvFF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC3BC,EAAM,IAAIC,IAAIF,EAASG,MACvBC,EAAkBN,EAAKO,8BAA8BC,MAAMC,KAAI,qBAAGC,QAAiBC,KAAKC,KAF9C,EAGRC,mBAASP,GAA1CQ,EAHyC,KAG3BC,EAH2B,KAK1CC,EAAgBF,EAAaL,KAAI,SAAAQ,GACrC,IAAMC,EAAQ,WAAcD,EAAIE,WAAlB,eACd,OACE,kBAAC,IAAD,CACEC,IAAKH,EAAIE,WACTE,GAAIJ,EAAIE,WACRG,KAAML,EAAIM,SAAWN,EAAIO,UAAJ,MAAsBP,EAAIO,UAAc,IAC7DC,MAAOP,EACPQ,KAAG,EACHC,QAAS,WACPxB,EAAIyB,cAAc,MAAOX,EAAIE,YAC7BhB,EAAI0B,QAAQ,KACZC,OAAO5B,SAASG,KAAOF,EAAI4B,iBAW7BC,EAAK,gBAAmB/B,EAAYgC,MAA/B,IAAwChC,EAAYiC,MAE/D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKhC,SAAUA,EAASiC,SAAUH,MAAOA,IACzC,kBAAC,IAAD,CAAcA,MAAOA,EAAOI,OAAQ,kBAAMpB,GAAeqB,OAV9C,SAAAC,GACb,IAAMC,EAAWjC,EAAgB+B,QAAO,SAAApB,GAAG,OAAIA,EAAIM,QAAQiB,MAAM,IAAIC,OAAOH,EAAO,SACnFvB,EAAgBwB","file":"component---src-templates-cars-js-8eff33974b5cf75999d1.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Uri from 'jsuri';\nimport { graphql } from 'gatsby';\nimport { Layout } from '../components/layout';\nimport FilteredList from '../components/utils/filtered-list';\nimport ListItem from '../components/utils/list-item';\nimport { SEO } from '../components/seo/seo';\nimport { sortCars } from '../functions/sort';\n\nconst Cars = ({ data, pageContext, location }) => {\n  const uri = new Uri(location.href);\n  const completeCarList = data.allMongodbBmbu7Ynqra11RqiCars.edges.map(({ node }) => node).sort(sortCars);\n  const [filteredCars, setFilteredCars] = useState(completeCarList);\n\n  const carComponents = filteredCars.map(car => {\n    const imageUrl = `/images/${car.mongodb_id}-resized.jpg`;\n    return (\n      <ListItem\n        key={car.mongodb_id}\n        id={car.mongodb_id}\n        name={car.variant + (car.startYear ? ` - ${car.startYear}` : '')}\n        image={imageUrl}\n        big\n        onClick={() => {\n          uri.addQueryParam('car', car.mongodb_id);\n          uri.setPath('/');\n          window.location.href = uri.toString();\n        }}\n      />\n    );\n  });\n\n  const search = value => {\n    const filtered = completeCarList.filter(car => car.variant.match(new RegExp(value, 'i')));\n    setFilteredCars(filtered);\n  };\n\n  const title = `Variantes de ${pageContext.brand} ${pageContext.model}`;\n\n  return (\n    <Layout>\n      <SEO location={location.pathname} title={title} />\n      <FilteredList title={title} render={() => carComponents} filter={search} />\n    </Layout>\n  );\n};\n\nCars.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiCars: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            mongodb_id: PropTypes.string.isRequired,\n            variant: PropTypes.string.isRequired,\n            startYear: PropTypes.string,\n            model: PropTypes.shape({\n              brand: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n              }),\n              name: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    brand: PropTypes.string.isRequired,\n    model: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`\n    query CarsByModel($brand: String, $model: String) {\n        allMongodbBmbu7Ynqra11RqiCars(filter: {model: {name: {eq: $model}, brand: { name: {eq: $brand}}}}) {\n        edges {\n          node {\n              mongodb_id,\n              variant,\n              startYear,\n              model {\n                  brand {\n                      name\n                  }\n                 name\n              }\n          }\n        }\n      }\n    }`;\n\nexport default Cars;\n"],"sourceRoot":""}