{"version":3,"sources":["webpack:///./src/templates/models.js"],"names":["Models","data","pageContext","location","uri","Uri","href","listName","schema","edges","map","node","sort","a","b","model","name","reduce","acc","el","length","useState","filteredModels","setFilteredModels","modelComponents","car","key","id","image","mongodb_id","big","onClick","setPath","brand","window","toString","title","pathname","render","filter","value","filtered","match","RegExp","query"],"mappings":"qrBAsDeA,UA3CA,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAE1BC,EAAM,IAAIC,IAAIF,EAASG,MACvBC,EAAWN,EAAKO,IAAS,QAAQC,MAClCC,KAAI,qBAAEC,QACNC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAMC,OAASF,EAAEC,MAAMC,KAAO,EAAIH,EAAEE,MAAMC,KAAOF,EAAEC,MAAMC,MAAQ,EAAI,KACtFC,QAAO,SAACC,EAAKC,GAAN,OAAaD,EAAIA,EAAIE,OAAO,IAAMF,EAAIA,EAAIE,OAAO,GAAGL,MAAMC,OAASG,EAAGJ,MAAMC,KAAOE,EAAtE,YAAgFA,GAAhF,CAAqFC,MAAK,IANrE,EAOFE,mBAASd,GAA9Ce,EAPuC,KAOvBC,EAPuB,KASxCC,EAAkBF,EAAeZ,KAAI,SAAAe,GACvC,OACI,kBAAC,IAAD,CAAUC,IAAKD,EAAIV,MAAMC,KACrBW,GAAIF,EAAIV,MAAMC,KACdA,KAAMS,EAAIV,MAAMC,KAChBY,MAAK,WAAaH,EAAII,WAAjB,OACLC,KAAK,EACLC,QAAS,WACL3B,EAAI4B,QAAJ,SAAqBP,EAAIV,MAAMkB,MAAMjB,KAArC,IAA6CS,EAAIV,MAAMC,MACvDkB,OAAO/B,SAASG,KAAOF,EAAI+B,iBAWrCC,EAAK,WAAclC,EAAY+B,MAErC,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK9B,SAAUA,EAASkC,SAAUD,MAAOA,IACzC,kBAAC,IAAD,CAAcA,MAAOA,EAAOE,OAAQ,kBAAMd,GAAiBe,OAVpD,SAAAC,GACX,IAAMC,EAAWlC,EAASgC,QAAO,SAAAd,GAAG,OAAIA,EAAIV,MAAMC,KAAK0B,MAAM,IAAIC,OAAOH,EAAO,SAC/EjB,EAAkBkB,QAmBnB,IAAMG,EAAK","file":"component---src-templates-models-js-280f5e282b75f2b39114.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Uri from 'jsuri';\r\nimport Layout from \"../components/layout\";\r\nimport FilteredList from \"../components/utils/filtered-list\";\r\nimport ListItem from \"../components/utils/list-item\";\r\nimport SEO from \"../components/seo/seo\";\r\nimport PropTypes from 'prop-types';\r\nimport { graphql } from 'gatsby';\r\nimport { schema } from '../constants';\r\n\r\n\r\nconst Models = ({data, pageContext, location}) => {\r\n\r\n    const uri = new Uri(location.href);\r\n    const listName = data[schema + 'Cars'].edges\r\n        .map(({node}) => node)\r\n        .sort((a, b) => a.model.name === b.model.name ? 0 : a.model.name < b.model.name ? -1 : 1)\r\n        .reduce((acc, el) => acc[acc.length-1] && acc[acc.length-1].model.name === el.model.name ? acc : [...acc, el], []);\r\n    const [filteredModels, setFilteredModels] = useState(listName);\r\n\r\n    const modelComponents = filteredModels.map(car => {\r\n        return (\r\n            <ListItem key={car.model.name}\r\n                id={car.model.name}\r\n                name={car.model.name}\r\n                image={`/images/${car.mongodb_id}.jpg`}\r\n                big={true}\r\n                onClick={() => {\r\n                    uri.setPath(`/cars/${car.model.brand.name}/${car.model.name}`);\r\n                    window.location.href = uri.toString();\r\n                }}>\r\n            </ListItem>\r\n        )\r\n    });\r\n\r\n    const search = value => {\r\n        const filtered = listName.filter(car => car.model.name.match(new RegExp(value, 'i')));\r\n        setFilteredModels(filtered);\r\n    };\r\n\r\n    const title = `Mod√®les ${pageContext.brand}`;\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO location={location.pathname} title={title} />\r\n            <FilteredList title={title} render={() => modelComponents} filter={search} />\r\n        </Layout>\r\n    );\r\n}\r\n\r\nModels.propTypes = {\r\n    name: PropTypes.string\r\n};\r\n\r\nexport default Models;\r\n\r\nexport const query = graphql`\r\n  query ModelByBrand($brand: String) {\r\n    allMongodbBmbu7Ynqra11RqiCars(filter: {model: {brand: {name: {eq: $brand}}}}) {\r\n        edges {\r\n            node {\r\n                mongodb_id,\r\n                model {\r\n                    name,\r\n                    brand {\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  }\r\n`\r\n\r\n"],"sourceRoot":""}