{"version":3,"sources":["webpack:///./src/templates/models.js"],"names":["Models","data","pageContext","location","uri","Uri","href","listName","allMongodbBmbu7Ynqra11RqiCars","edges","map","node","sort","a","b","sortModels","model","reduce","acc","el","length","name","useState","filteredModels","setFilteredModels","modelComponents","car","key","id","image","mongodb_id","big","onClick","setPath","brand","window","toString","title","pathname","render","filter","value","filtered","match","RegExp","query"],"mappings":"qrBA8EeA,UApEA,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC7BC,EAAM,IAAIC,IAAIF,EAASG,MACvBC,EAAWN,EAAKO,8BAA8BC,MACjDC,KAAI,qBAAGC,QACPC,MAAK,SAACC,EAAGC,GAAJ,OAAUC,YAAWF,EAAEG,MAAOF,EAAEE,UACrCC,QAAO,SAACC,EAAKC,GAAN,OACND,EAAIA,EAAIE,OAAS,IAAMF,EAAIA,EAAIE,OAAS,GAAGJ,MAAMK,OAASF,EAAGH,MAAMK,KAAOH,EAA1E,YAAoFA,GAApF,CAAyFC,MACxF,IAP6C,EAQNG,mBAASf,GAA9CgB,EAR2C,KAQ3BC,EAR2B,KAU5CC,EAAkBF,EAAeb,KAAI,SAAAgB,GAAG,OAC5C,kBAAC,IAAD,CACEC,IAAKD,EAAIV,MAAMK,KACfO,GAAIF,EAAIV,MAAMK,KACdA,KAAMK,EAAIV,MAAMK,KAChBQ,MAAK,WAAaH,EAAII,WAAjB,eACLC,KAAG,EACHC,QAAS,WACP5B,EAAI6B,QAAJ,SAAqBP,EAAIV,MAAMkB,MAAMb,KAArC,IAA6CK,EAAIV,MAAMK,MACvDc,OAAOhC,SAASG,KAAOF,EAAIgC,iBAU3BC,EAAK,WAAcnC,EAAYgC,MAErC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK/B,SAAUA,EAASmC,SAAUD,MAAOA,IACzC,kBAAC,IAAD,CAAcA,MAAOA,EAAOE,OAAQ,kBAAMd,GAAiBe,OAVhD,SAAAC,GACb,IAAMC,EAAWnC,EAASiC,QAAO,SAAAd,GAAG,OAAIA,EAAIV,MAAMK,KAAKsB,MAAM,IAAIC,OAAOH,EAAO,SAC/EjB,EAAkBkB,QA4Cf,IAAMG,EAAK","file":"component---src-templates-models-js-3413c0f46ee193538940.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Uri from 'jsuri';\nimport { sortModels } from '../functions/sort';\nimport { Layout } from '../components/layout';\nimport FilteredList from '../components/utils/filtered-list';\nimport ListItem from '../components/utils/list-item';\nimport { SEO } from '../components/seo/seo';\n\nconst Models = ({ data, pageContext, location }) => {\n  const uri = new Uri(location.href);\n  const listName = data.allMongodbBmbu7Ynqra11RqiCars.edges\n    .map(({ node }) => node)\n    .sort((a, b) => sortModels(a.model, b.model))\n    .reduce((acc, el) => (\n      acc[acc.length - 1] && acc[acc.length - 1].model.name === el.model.name ? acc : [...acc, el]\n    ), []);\n  const [filteredModels, setFilteredModels] = useState(listName);\n\n  const modelComponents = filteredModels.map(car => (\n    <ListItem\n      key={car.model.name}\n      id={car.model.name}\n      name={car.model.name}\n      image={`/images/${car.mongodb_id}-resized.jpg`}\n      big\n      onClick={() => {\n        uri.setPath(`/cars/${car.model.brand.name}/${car.model.name}`);\n        window.location.href = uri.toString();\n      }}\n    />\n  ));\n\n  const search = value => {\n    const filtered = listName.filter(car => car.model.name.match(new RegExp(value, 'i')));\n    setFilteredModels(filtered);\n  };\n\n  const title = `Mod√®les ${pageContext.brand}`;\n\n  return (\n    <Layout>\n      <SEO location={location.pathname} title={title} />\n      <FilteredList title={title} render={() => modelComponents} filter={search} />\n    </Layout>\n  );\n};\n\nModels.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiCars: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            mongodb_id: PropTypes.string.isRequired,\n            model: PropTypes.shape({\n              mongodb_id: PropTypes.string.isRequired,\n              brand: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n              }),\n              name: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    brand: PropTypes.string.isRequired,\n    model: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Models;\n\nexport const query = graphql`\n  query ModelByBrand($brand: String) {\n    allMongodbBmbu7Ynqra11RqiCars(filter: {model: {brand: {name: {eq: $brand}}}}) {\n        edges {\n            node {\n                mongodb_id,\n                model {\n                    name,\n                    brand {\n                        name\n                    }\n                }\n            }\n        }\n    }\n  }\n`;\n"],"sourceRoot":""}