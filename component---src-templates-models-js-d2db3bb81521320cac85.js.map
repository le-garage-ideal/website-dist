{"version":3,"file":"component---src-templates-models-js-d2db3bb81521320cac85.js","mappings":"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","sources":["webpack://perfect-garage/./src/components/utils/filtered-list.module.scss","webpack://perfect-garage/./src/components/utils/filtered-list.js","webpack://perfect-garage/./src/components/utils/list-item.js","webpack://perfect-garage/./src/components/utils/list-item.module.scss","webpack://perfect-garage/./src/functions/sort.js","webpack://perfect-garage/./src/templates/models.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var list = \"filtered-list-module--list--jcHES\";\nexport var listHeader = \"filtered-list-module--listHeader--H8u8k\";\nexport var searchInput = \"filtered-list-module--searchInput--HbyqD\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as filteredListStyles from './filtered-list.module.scss';\n\nconst FilteredList = ({ title, render, filter }) => {\n  const [previousFilterValue, setPreviousFilterValue] = useState(null);\n  const [filterInputTimeout, setFilterInputTimeout] = useState(null);\n\n  const search = () => {\n    const input = document.querySelector('#search-input');\n    if (input.value !== previousFilterValue) { // if text has changed\n      clearTimeout(filterInputTimeout); // this will interrupt previous search\n      const timer = setTimeout(() => filter(input.value), 700); // this will trigger new search some delay\n\n      // we save timer and values for later calls\n      setFilterInputTimeout(timer);\n      setPreviousFilterValue(input.value);\n    }\n  };\n\n  return (\n    <>\n      <header className={['field', 'is-size-4', filteredListStyles.listHeader].join(' ')}>\n        <h1 className=\"has-text-light\">{title}</h1>\n        <p className=\"control has-text-dark has-icons-right\">\n          <input\n            id=\"search-input\"\n            type=\"text\"\n            onKeyUp={search}\n            className={[filteredListStyles.searchInput, 'input'].join(' ')}\n          />\n          <span className=\"icon is-right\">\n            <FontAwesomeIcon icon=\"search\" />\n          </span>\n        </p>\n      </header>\n      <ul className={filteredListStyles.list}>\n        {render()}\n      </ul>\n    </>\n  );\n};\n\nFilteredList.propTypes = {\n  title: PropTypes.string.isRequired,\n  render: PropTypes.func.isRequired,\n  filter: PropTypes.func.isRequired,\n};\n\nexport default FilteredList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as listItemStyles from './list-item.module.scss';\n\nconst ListItem = ({\n  id, name, image, onClick, selected, big,\n}) => {\n  const classNames = [listItemStyles.logoLink];\n  if (selected) {\n    classNames.push(listItemStyles.selected);\n  }\n\n  if (big) {\n    classNames.push(listItemStyles.logoLinkBig);\n  } else {\n    classNames.push(listItemStyles.logoLinkSmall);\n  }\n\n  return (\n    <button type=\"button\" className={classNames.join(' ')} onClick={() => onClick(id)}>\n      <figure>\n        <img src={image} alt={name} />\n        <figcaption>{name}</figcaption>\n      </figure>\n    </button>\n  );\n};\n\nListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  selected: PropTypes.bool,\n  big: PropTypes.bool,\n};\n\nListItem.defaultProps = {\n  selected: false,\n  big: false,\n};\n\nexport default ListItem;\n","// extracted by mini-css-extract-plugin\nexport var logoLink = \"list-item-module--logoLink--kpsH-\";\nexport var logoLinkSmall = \"list-item-module--logoLinkSmall--4A+qc\";\nexport var logoLinkBig = \"list-item-module--logoLinkBig--pmnhY\";\nexport var selected = \"list-item-module--selected--Nwx6Q\";","export const sortField = (a, b, field) => {\n  if (!a[field] && !b[field]) {\n    return 0;\n  }\n  if (!a[field]) {\n    return -1;\n  }\n  if (!b[field]) {\n    return 1;\n  }\n  if (a[field] === b[field]) {\n    return 0;\n  }\n  return a[field] < b[field] ? -1 : 1;\n};\n\nexport const sortCars = (x, y) => (\n  sortField(x, y, 'startYear') === 0 ? sortField(x, y, 'variant') : sortField(x, y, 'startYear')\n);\n\nexport const sortModels = (x, y) => (\n  sortField(x.brand, y.brand, 'name') === 0 ? sortField(x, y, 'name') : sortField(x.brand, y.brand, 'name')\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Uri from 'jsuri';\nimport { useIntl, navigate } from 'gatsby-plugin-react-intl';\nimport { sortModels } from '../functions/sort';\nimport FilteredList from '../components/utils/filtered-list';\nimport ListItem from '../components/utils/list-item';\nimport { Layout } from '../components/layout';\nimport { SEO } from '../components/seo/seo';\nimport { extractRelativePathWithParams } from '../functions/url';\n\nconst Models = ({ data, pageContext, location }) => {\n  const intl = useIntl();\n\n  const uri = new Uri(location.href);\n  const listName = data.allMongodbBmbu7Ynqra11RqiCars.edges\n    .map(({ node }) => node)\n    .sort((a, b) => sortModels(a.model, b.model))\n    .reduce((acc, el) => (\n      acc[acc.length - 1] && acc[acc.length - 1].model.name === el.model.name ? acc : [...acc, el]\n    ), []);\n  const [filteredModels, setFilteredModels] = useState(listName);\n\n  const modelComponents = filteredModels.map(car => (\n    <li key={car.model.name}>\n      <ListItem\n        id={car.model.name}\n        name={car.model.name}\n        image={`/images/${car.mongodb_id}-resized.jpg`}\n        big\n        onClick={() => {\n          uri.setPath(`/cars/${car.model.brand.name}/${car.model.name}`);\n          navigate(extractRelativePathWithParams(uri));\n        }}\n      />\n    </li>\n  ));\n\n  const search = value => {\n    const filtered = listName.filter(car => car.model.name.match(new RegExp(value, 'i')));\n    setFilteredModels(filtered);\n  };\n\n  const title = intl.formatMessage({ id: 'templates.models.title' }, { brand: pageContext.brand });\n\n  const description = intl.formatMessage({ id: 'templates.models.description' }, { brand: pageContext.brand });\n\n  return (\n    <Layout>\n      <SEO\n        uri={location.href}\n        location={location.pathname}\n        title={title}\n        description={description}\n      />\n      <FilteredList title={title} render={() => modelComponents} filter={search} />\n    </Layout>\n  );\n};\n\nModels.propTypes = {\n  data: PropTypes.shape({\n    allMongodbBmbu7Ynqra11RqiCars: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            mongodb_id: PropTypes.string.isRequired,\n            model: PropTypes.shape({\n              mongodb_id: PropTypes.string.isRequired,\n              brand: PropTypes.shape({\n                name: PropTypes.string.isRequired,\n              }),\n              name: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    brand: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Models;\n\nexport const query = graphql`\n  query ModelByBrand($brand: String) {\n    allMongodbBmbu7Ynqra11RqiCars(filter: {model: {brand: {name: {eq: $brand}}}}) {\n        edges {\n            node {\n                mongodb_id,\n                model {\n                    name,\n                    brand {\n                        name\n                    }\n                }\n            }\n        }\n    }\n  }\n`;\n"],"names":["listHeader","searchInput","title","render","filter","useState","previousFilterValue","setPreviousFilterValue","filterInputTimeout","setFilterInputTimeout","className","filteredListStyles","join","id","type","onKeyUp","input","document","querySelector","value","clearTimeout","timer","setTimeout","icon","ListItem","name","image","onClick","selected","big","classNames","push","src","alt","defaultProps","sortField","a","b","field","sortCars","x","y","sortModels","brand","data","pageContext","location","intl","useIntl","uri","Uri","href","listName","allMongodbBmbu7Ynqra11RqiCars","edges","map","node","sort","model","reduce","acc","el","length","filteredModels","setFilteredModels","modelComponents","car","key","mongodb_id","setPath","navigate","extractRelativePathWithParams","formatMessage","description","pathname","filtered","match","RegExp"],"sourceRoot":""}